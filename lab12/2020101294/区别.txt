1. 链接时机：
   静态库：在编译时将库的代码和数据直接链接到可执行文件中。这意味着可执行文件独立于库，包含了库的所有代码和数据。
   动态库：在编译时不会将库的代码和数据链接到可执行文件中，而是在运行时动态加载到内存。
2. 文件大小和内存占用：
   静态库：增加了可执行文件的大小，因为库的代码和数据被完全包含在可执行文件中。每个使用该库的可执行文件都包含一份库的拷贝，可能导致浪费和冗余。
   动态库：可执行文件更小，因为它只包含了对库的引用。动态库在内存中只有一份，多个应用程序可以共享这一份内存，减少了冗余。
3. 更新和维护：
   静态库：库的更新需要重新编译和链接所有使用该库的可执行文件。每次更新都需要重新分发整个可执行文件。
   动态库：库的更新只需要替换库文件而不影响可执行文件。这使得更新库更为灵活，且可以在不重新编译可执行文件的情况下进行。
4. 运行时加载：
   静态库：在编译时链接到可执行文件，因此在运行时无需动态加载库。
   动态库：在运行时加载到内存，因此允许更灵活的库管理，例如动态加载和卸载。
5. 跨平台兼容性：
   静态库：可执行文件与静态库一起分发，适用于静态链接。在不同平台上可能需要不同的编译和链接过程。
   动态库：动态库通常提供跨平台的兼容性，同一份库文件可以在不同平台上被多个可执行文件共享。
