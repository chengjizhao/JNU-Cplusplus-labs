vector
典型的序列容器，C++标准严格要求次容器的实现内存必须是连续的，唯一可以和标准C兼容的stl容器，任意元素的读取、修改具有常数时间复杂度，在序列尾部进行插入、删除是常数时间复杂度，但在序列的头部插入、删除的时间复杂度是O(n)，可以在任何位置插入新元素，有随机访问功能，插入删除操作需要考虑。

deque
序列容器，内存也是连续的，和vector相似，区别在于在序列的头部插入和删除操作也是常数时间复杂度,可以在任何位置插入新元素，有随机访问功能。

list  
序列容器，内存是不连续的，任意元素的访问、修改时间复杂度是O(n)，插入、删除操作是常数时间复杂度,可以在任何位置插入新元素。

set  
关联容器，元素不允许有重复，数据被组织成一棵红黑树，查找的速度非常快，时间复杂度是O(logN)

multiset
关联容器，和set一样，却别是允许有重复的元素，具备时间复杂度O(logN)查找功能。

map  
关联容器，按照{键，值}方式组成集合，按照键组织成一棵红黑树，查找的时间复杂度O(logN)，其中键不允许重复。

multimap
和map一样，区别是键可以重复

使用场景：
1）如果需要随机访问，用vector
2）如果存储元素的数目已知，用vector
3）需要任意位置随机插入删除，用list
4）只有需要更多在容器的首部尾部插入删除元素，用deque
5）元素是复杂结构用list，也可以用vector存储指针(需要额外的精力去维护内存)，看需求
6）如果操作是基于键值，用set map
7）如果需要经常的搜索，用map set
