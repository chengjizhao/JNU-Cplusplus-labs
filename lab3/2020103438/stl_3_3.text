vector：
特点：vector是一个动态数组，可以自动调整大小。它在随机访问和尾部插入/删除元素时效率高，但在中间插入/删除元素时效率较低。
典型使用场景：当需要高效的随机访问元素，或者在尾部频繁插入/删除元素时，vector是一个很好的选择。

list：
特点：list是一个双向链表，插入和删除元素的效率非常高，但随机访问元素的效率较低。
典型使用场景：当需要频繁在容器中插入/删除元素，但不需要随机访问元素时，list是一个合适的选择。

deque：
特点：deque（双端队列）是一个双向队列，支持在头部和尾部高效插入/删除元素，也支持随机访问元素。
典型使用场景：当需要高效的头部和尾部插入/删除元素，同时还需要随机访问元素时，deque是一个适用的容器。

set 和 multiset：
特点：set是一个集合容器，其中的元素是唯一的，而multiset允许重复元素。这些容器使用红黑树实现，元素是自动排序的。
典型使用场景：当需要维护一组唯一的元素并按排序顺序进行访问时，set和multiset是有用的。

map 和 multimap：
特点：map是一种关联容器，用于存储键-值对，其中键是唯一的。multimap允许重复的键。
典型使用场景：当需要将键映射到值，并且需要在键上进行快速查找时，map和multimap是有用的。

unordered_set 和 unordered_map：
特点：这些容器是使用哈希表实现的，不维护元素的排序。unordered_set中的元素是唯一的，而unordered_map用于键-值映射，键是唯一的。
典型使用场景：当需要快速查找元素而不关心元素的顺序时，unordered_set和unordered_map是有用的。哈希表的查找性能通常比红黑树快。