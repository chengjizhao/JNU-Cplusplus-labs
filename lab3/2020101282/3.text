特点：
通用性和模板化设计：STL标准容器采用模板化设计，允许存储不同类型的数据，实现了通用性和灵活性。
高效的内部实现：STL标准容器的内部实现经过高度优化，提供了高效的数据存储、访问和操作。
标准接口和迭代器：STL标准容器提供了一致的标准接口和迭代器，使得算法能够直接操作容器，提高了代码的可复用性和可维护性。
自动内存管理：STL标准容器会自动管理内存，避免了手动内存分配和释放，提高了代码的安全性。

典型的使用场景：
std::vector：
用于动态数组，支持快速随机访问和在末尾添加/删除元素。
适用于需要高效随机访问、频繁在末尾进行插入和删除的场景。
std::list：
双向链表实现，支持高效的插入和删除操作，但不支持随机访问。
适用于需要高效插入和删除，但不要求随机访问的场景。
std::deque：
双端队列，兼顾了std::vector和std::list的优点，支持快速随机访问和在两端进行插入/删除操作。
适用于需要高效随机访问和在两端进行插入和删除的场景。
std::set：
基于红黑树实现的有序集合，不允许重复元素，支持快速查找、插入和删除。
适用于需要元素有序、不允许重复的集合场景。
std::map：
基于红黑树实现的有序键值对集合，每个元素是一个键值对。
适用于需要键值对有序、按键查找、插入和删除的场景。
std::unordered_set和std::unordered_map：
基于哈希表实现的集合和键值对集合，提供快速的查找、插入和删除，但元素顺序不确定。
适用于需要快速查找、插入和删除，不要求元素有序的场景。
