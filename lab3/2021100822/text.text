STL（Standard Template Library）是C++中的一个重要组成部分，它提供了一组标准容器和算法，能够用于处理各种数据结构和算法问题。
STL标准容器的特点：
1. 泛型性：STL容器是泛型的，可以容纳不同类型的数据，因此具有很高的通用性。
2. 动态内存管理：STL容器能够自动管理内存，无需手动分配或释放内存。
3. 安全性：STL容器提供了边界检查和异常处理机制，减少了程序运行时的错误。
4. 高性能：STL容器的实现经过优化，通常具有高效的性能。
5. 标准化：STL容器遵循C++标准，因此在不同的C++编译器和平台上表现一致。

典型的STL标准容器及其使用场景：
1. vector（向量）：
    特点：动态数组，支持快速随机访问和尾部插入/删除操作。
    使用场景：适用于需要动态大小数组的情况，例如列表、堆栈、队列等。   
2. list（链表）：
    特点：双向链表，支持快速插入/删除操作，但随机访问较慢。
    使用场景：适用于需要频繁插入/删除元素的情况，例如排序操作、LRU缓存等。   
3. deque（双端队列）：
    特点：双端队列，支持快速头部和尾部插入/删除操作，也支持随机访问。
    使用场景：适用于需要在队列两端进行高效操作的情况，例如双端队列、滑动窗口等。 
4. set 和 multiset（集合）：
    特点：基于红黑树的有序容器，元素唯一，支持快速查找、插入和删除操作。
    使用场景：适用于需要维护有序不重复元素集合的情况，例如字典、词典等。   
5. map 和 multimap（映射）：
    特点：基于红黑树的有序键值对容器，键唯一，支持快速查找、插入和删除操作。
    使用场景：适用于需要维护有序键值对的情况，例如关联数组、索引等。
6. unordered_set 和 unordered_map（无序集合和映射）：
   特点：基于哈希表的容器，元素/键不重复，支持快速查找、插入和删除操作。
   使用场景：适用于需要快速查找元素/键的情况，例如哈希集合、哈希映射等。
