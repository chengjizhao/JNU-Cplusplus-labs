序列容器，有vector, list, deque, string。
关联容器, 有set, multiset, map,multimap。
vector：典型的序列容器，C++标准严格要求次容器的实现内存必须是连续的，vector是数组的一种表示，它提供了自动内存管理功能，可以动态改变vector对象的长度，并随着元素的添加和删除而增大或缩小。vector可以和标准C兼容的stl容器，任意元素的读取、修改是十分复杂的，在序列尾部进行插入、删除和在序列的头部插入、删除较为简单，可以在任何位置插入新元素，有随机访问功能，插入删除操作需要考虑。
使用场景：首尾读取修改元素，随机插入。
list ：双向链表。除了第一个和最后一个元素外，每个元素都与前后的元素相连接，list在链表中任一位置进行插入和删除的时间都是固定的。但是list不支持数组表示法和随机访问。链表的插入和删除只是改变链接信息，所以不支持随机访问。
使用场景：修改元素。
deque：双端队列。在STL中，其实现类似于vector容器，支持随机访问。主要区别在于，从deque对象的开始位置插入和删除元素的时间是固定的，而不是像vector那样是线性时间的。
但是：deque为了实现在首尾插入和删除元素，其设计比vector更复杂。所以deque对元素的随机访问速度比vector慢。
使用场景：开始位置插入和删除元素。
string：优点在于使用的时候，不必考虑内存分配和释放的问题；动态管理内存（可扩展）提供了大量操作容器的API。缺点是效率略有降低，占用的资源也更多。
使用场景：存储 json 或其他对象格式化的字符串。
set：其是关联集合，和map的区别在于：set的值类型和键类型必须是相同是，而map的值和键类型可不同，可反转，可排序，且键是唯一的。所以不能存储多个相同的值。
map：其键和值的类型可不同，同一个键只能和一个值相关联。和set的区别在于：set的值类型和键类型必须是相同是，而map的值和键类型可不同.
使用场景:对有映射关系的数据进行存储。
multiset：其键和值的类型相同，同一个键可能和多个值相关联。
使用场景:对有类型相同的映射关系的数据进行存储。
multimap:其键和值的类型可不同，同一个键可能和多个值相关联。
使用场景:对有类型不同的映射关系的数据进行存储。

