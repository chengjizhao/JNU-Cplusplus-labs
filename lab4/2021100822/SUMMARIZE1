第5章：循环与关系表达式
1. `for` 循环用于执行一系列语句多次，通常包括初始化、测试条件和更新条件。
2. `while` 循环和 `do...while` 循环也用于重复执行语句，但在测试条件和执行之间有不同的时机。
3. 关系运算符（如 `<`, `>`, `<=`, `>=`, `==`, `!=`）用于比较值并产生布尔结果。
4. `break` 和 `continue` 语句可用于控制循环的执行流程。
5. 循环嵌套是将多个循环嵌套在其他循环内，常用于处理多维数组等复杂结构。

 第6章：分支语句和逻辑运算符
1. `if` 语句用于根据条件选择不同的执行路径。
2. `else` 子句可用于在条件不满足时执行备用代码块。
3. `switch` 语句用于多个选择中的一个，每个情况使用 `case` 关键字标识。
4. 逻辑运算符（`&&`, `||`, `!`）用于组合条件并生成逻辑结果。
5. 条件运算符 `? :` 用于根据条件选择不同的表达式。

第7章：函数--C++ 的编程模块
1. 函数是独立的代码单元，可重复使用，通常包括函数头、函数体和返回值。
2. 函数可以有参数，参数允许在函数内部传递数据。
3. 函数可以返回值，`void` 表示无返回值。
4. 函数的原型（声明）用于告知编译器函数的存在和参数类型。
5. 函数可以是递归的，即函数可以调用自身。
6. 函数的局部变量仅在函数内部可见，全局变量在整个程序中可见。

第8章：数组--C++ 的数据结构
1. 数组是一种数据结构，用于存储相同数据类型的多个元素。
2. 数组的元素可以通过索引（从0开始）访问。
3. 数组的大小在创建时固定，不可改变。
4. C++ 11 引入了标准库的 `array` 类型，提供更多功能和安全性。
5. 多维数组是数组的数组，常用于表示矩阵等数据结构。

第9章：字符和字符串
1. 字符是C++的基本数据类型，表示单个字符（如字母、数字、符号）。
2. 字符串是字符数组，用于存储文本数据，以空字符 `'\0'` 结尾。
3. C-风格字符串是字符数组，可以使用库函数来处理。
4. C++ 提供了 `string` 类型，更方便处理字符串，具有丰富的成员函数。
5. 字符串输入和输出可以使用 `cin` 和 `cout` 进行，也可以使用 `getline` 函数读取整行文本。
