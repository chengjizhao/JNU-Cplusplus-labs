5
如果循环测试条件为 true或非零，则循环将重复执行一组指令；如果测试条件为 false 或0，则结束循环。
for 循环和 while 循环都是入口条件循环，这意味着程序将在执行循环体中的语句之前检查测试条件。
do while 循环是出口条件循环，这意味着其在执行循环体中的语句之后检查条件。
关系表达式是通过使用6种关系运算符之一构成的:<、<=、==、>=、>或!=。
关系表达式的结果为 bool 类型，值为 true 或 false。

6
if语句使程序有条件地执行语句或语句块，也就是说，如果满足特定的条件，程序将执行特定的语句或语句块。
if else 语句程序选择执行两个语句或语句块之一。可以在这条语句后再加上 if else，以提供一系列的选项。
switch语句引导程序执行一系列选项之一。
cctype字符函数库提供了一组方便的、功能强大的工具，可用于分析字符输入。
对于文件I/O 来说，循环和选择语句是很有用的工具；文件I/O与控制台I/O极其相似。
声明 ifstream和 ofstream 对象，并将它们同文件关联起来后，便可以像使用 cin 和 cout 那样使用这些对象。

7
在默认情况下，C++函数按值传递参数。这意味着函数定义中的形参是新的变量，它们被初始化为所数调用所提供的值。因此，C++函数通过使用拷贝，保护了原始数据的完整性。
C++将数组名参数视为数组第一个元素的地址。从技术上讲，这仍然是按值传递的，因为指针是原长地址的拷贝，但函数将使用指针来访问原始数组的内容。
在编写函数代码时，可以像使用数组名那样使用 arr 来访问元素：arr[i]。即使在传递指针时，也可以将形参声明为const指针，来保护原始数据的完整性。由于传递数据的地址时，并不会传输有关数组长度的信息，因此通常将数组长度作为独立的参数来传递。另外，也可传递两个指针(其中一个指向数组开头，另一个指向数组末尾的下一个元素)，以指定一个范围。
C++提供了3种表示C-风格字符串的方法:字符数组、字符串常量和字符串指针。
C++使用空值字符(\0)来结束字符串，因此字符串函数检测空值字符来确定字符串的结尾。

8
C++扩展了C语言的函数功能。通过将inline关键字用于函数定义，并在首次调用该数前提供其函数定义，可以使得C++编译器将该函数视为内联函数。也就是说，编译器不是让程序跳到独立的代码段，以执行函数，而是用相应的代码替换函数调用。只有在函数很短时才能采用内联方式。
用变量是一种伪装指针，它允许为变量创建别名。用变量主要被用作处理结构和类对象的函数的参数。通常，被声明为特定类型引用的标识符只能指向这种类型的数据；然而，如果一个类（如ofstream)是从另一个类(如ostream)派生出来的，则基类引用可以指向派生类对象。
C++原型让您能够定义参数的默认值。如果函数调用省略了相应的参数，则程序将使用默认值；如!函数调用提供了参数值，则程序将使用这个值。能在参数列表中从右到左提供默认参数，因此，如果为某个参数提供了默认值，则必须为该参数右边所有的参数提供默认值。
函数的特征标是其参数列表。程序员可以定义两个同名函数，只要其特征标不同。这被称为函数多态或函数重载。通常，通过重载函数来为不同的数据类型提供相同的服务。
函数模板自动完成重载函数的过程。只需使用泛型和具体算法来定义函数，编译器将为程序中使用的特定参数类型生成正确的函数定义。

9
C++的存储方案决定了变量保留在内存中的时间以及程序的哪一部分可以访向它。自动变量可以通过使用存储类型说明符register或根本不使用说明符来声明，没有使用说明符时，变量将默认为自动的。
静态变量在整个程序执行期间都存在。对于在函数外面定义的变量，其所属文件中位于该变量的家后面的所有函数都可以使用它。另一个文件要使用这种变量，必须使用 extern 关键字来明它。在默认情况下，C++函数的链接性为外部，因此可在文件间共享；但使用关键字 static 限定的函数的链接性为内部的，被限制在定义它的文件中。
动态内存分配和释放是使用new和 delete 进行的，它使用自由存储区或堆来存储数据。调用new占用内存，而调用 delete 释放内存。程序使用指针来跟踪这些内存单元。
名称空间允许定义一个可在其中声明标识符的命名区域。这样做的目的是减少名称冲突，尤其当群非常大，并使用多个厂商的代码时。可以通过使用作用域解析运算符、using声明或 using 编译指令，程名称空间中的标识符可用。
