1. `external` (外部链接性):
    `external` 是一个存储类别关键字，用于指定标识符（变量或函数）在整个程序中可见，可以被其他源文件访问。
    在C++中，默认情况下，全局变量和函数具有外部链接性，可以在不同文件中访问。
2.  `static` (静态):
    `static` 是一个存储类别关键字，它可以用于变量、函数和类成员。
    当用于全局变量时，`static` 限制了变量的作用域为当前文件，即该变量在其他文件中不可见。
    当用于函数或类成员时，`static` 将其作用域限制为当前文件或类，不允许被外部访问，但可以被同一文件或类中的其他函数或成员访问。
3. `namespace` (命名空间):
    `namespace` 是用于避免命名冲突的C++特性，允许将标识符组织到命名空间中。
    可以通过 `namespace` 关键字定义命名空间，并将变量、函数、类等放置在该命名空间中，以避免全局命名冲突。
    使用命名空间可以将相似或相关的标识符组织在一起，提高代码的可维护性和可读性。

 `external` 和 `static` 关系:
     `external` 和 `static` 是存储类修饰符，用于调整变量和函数的链接性。
     `external` 用于指定外部链接性，允许在不同文件间访问。
     `static` 用于限定变量的链接性，使其具有内部链接性，只在当前文件可见。
 `static` 和 `namespace` 关系:
    `static` 是用于修改变量和函数的关键字，可以限制变量的作用域和生命周期，或者限制函数的链接性。
    `namespace` 是用于创建逻辑上的作用域，将一系列的变量、函数、类等组织在一个命名空间下，避免命名冲突，但不影响变量的作用域和生命周期。
 `namespace` 和 `external` 关系:
    `namespace` 主要用于组织代码，避免全局命名冲突，不直接涉及链接性。
    `external` 主要用于指定链接性，使变量或函数能够在不同文件间共享。
