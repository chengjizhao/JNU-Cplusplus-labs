第五章：
C++提供了3中循环：for循环、while循环和do while循环。
For循环：
如果循环测试条件为true或非零，则循环将重复执行一组指令；如果测试条件为false或0,则结束循环。
for循环是入口条件循环，这意味着程序将在执行循环体中的语句之前检查测试条件。
While循环：
如果循环测试条件为true或非零，则循环将重复执行一组指令；如果测试条件为false或0,则结束循环。
while循环是入口条件循环，这意味着程序将在执行循环体中的语句之前检查测试条件。
Do while循环：
如果循环测试条件为true或非零，则循环将重复执行一组指令；如果测试条件为false或0,则结束循环。
do while循环是出口条件循环，这意味着其将在执行循环体中的语句之后检查条件。
每种循环的句法都要求循环体由一条语句组成。然而，这条语句可以是复合语句，也可以是语句块(由花括号括起的多条语句)。
关系表达式
关系表达式对两个值进行比较，常被用作循环测试条件。
关系表达式是通过使用6种关系运算符之一构成的：<、<=、==、>=、>或!=。
关系表达式的结果为bool类型，值为true或false。

第六章：
C++提供了if语句、if else语句和switch语句来管理选项。
If、if else和switch语句：
if语句使程序有条件地执行语句或语句块，也就是说，如果满足特定的条件，程序将执行特定的语句或语句块。
if else语句程序选择执行两个语句或语句块之一。可以在这条语句后再加上if else,以提供一系列的选项。
If和if else语句通常使用关系表达式作为测试条件。通过使用逻辑运算符（&&、||和！），可以组合或修改关系表达式，创建更细致的测试。条件运算符（？：）提供了一种选择两个值之一的简洁方式。
switch语句引导程序执行一系列选项之一。


第七章：
  函数是C++的编程模块。要使用函数，必须提供定义和原型，并调用该函数。其中库函数是已经定义和编译好的函数，同时可以使用标准库头文件提供其原型，因此只需正确地调用这种函数即可。
  函数分成两类：没有返回值的函数和有返回值的函数。没有返回值的函数被称为void函数；对于有返回值的函数，必须使用返回语句，以便将值返回给调用函数，值本身可以是常量、变量，也可以是表达式。
  函数定义是实现函数功能的代码：函数原型描述了函数的接口：传递给函数的值的数目和种类以及函数的返回类型，也就是说它将函数返回值的类型（如果有的话）以及参数的类型和数量告诉编译器。函数调用使
得程序将参数传递给函数，并执行函数的代码。函数原型是一条语句，因此必须以分号结束，获得原型最简单的方法是复制函数定义的函数头，并添加分号。
  在默认情况下，C++函数按值传递参数。这意味着函数定义中的形参是新的变量，它们被初始化为函数调用所提供的值。因此，C++函数通过使用拷贝，保护了原始数据的完整性。
  C++将数组名参数视为数组第一个元素的地址。从技术上讲，这仍然是按值传递的，因为指针是原始地址的拷贝，但函数将使用指针来访问原始数组的内容。当且仅当声明函数的形参时，下面两个声明才是等价的：
typeName arr[];
typeName* arr;
  这两个声明都表明，arr是指向typeName的指针，但在编写函数代码时，可以像使用数组名那样使用arr来访问元素：arr[i]。
即使在传递指针时，也可以将形参声明为const指针，来保护原始数据的完整性。
  C++提供了3种表示C-风格字符串的方法：字符数组、字符串常量和字符串指针。它们的类型都是char*(char指针),因此被作为char*类型参数传递给函数。C++使用空值字符(\0)来结束字符串，因此字符串函数检测空
值字符来确定字符串的结尾。
  C++还提供了string类，用于表示字符串。函数可以接受string对象作为参数以及将string对象作为返回值。string类的方法size()可用于判断其存储的字符串的长度。
  C++处理结构的方式与基本类型完全相同，这意味着可以按值传递结构，并将其用作函数返回类型。然而，如果结构非常大，则传递结构指针的效率将更高，同时函数能够使用原始数据。这些考虑因素也适用于类对象。
  C++函数可以是递归的，也就是说，函数代码中可以包括对函数本身的调用。
  C++函数名与函数地址的作用相同。通过将函数指针作为参数，可以传递要调用的函数的名称。

第八章：
  C++扩展了C语言的函数功能。通过将inline关键字用于函数定义，并在首次调用该函数前提供其函数定义，可以使得C+编译器将该函数视为内联函数。
也就是说，编译器不是让程序跳到独立的代码段，以执行函数，而是用相应的代码替换函数调用。只有在函数很短时才能采用内联方式。
  引用变量是一种伪装指针，它允许为变量创建别名(另一个名称)。引用变量主要被用作处理结构和类对象的函数的参数。
  C++原型让您能够定义参数的默认值。如果函数调用省略了相应的参数，则程序将使用默认值；如果函数调用提供了参数值，则程序将使用这个值(而不是默认值)。只能在参数列表中从右到左提供默认参数。因此，
如果为某个参数提供了默认值，则必须为该参数右边所有的参数提供默认值。
  函数的特征标是其参数列表。程序员可以定义两个同名函数，只要其特征标不同。这被称为函数多态或函数重载。通常，通过重载函数来为不同的数据类型提供相同的服务。
  函数模板自动完成重载函数的过程。只需使用泛型和具体算法来定义函数，编译器将为程序中使用的特定参数类型生成正确的函数定义。

第九章：
  一种有效的组织策略是，使用头文件来定义用户类型，为操纵用户类型的函数提供函数原型；并将函数定义放在一个独立的源代码文件中。头文件和源代码文件一起定义和实现了用户定义的类型及其使用方式。
最后，将main()和其他使用这些函数的函数放在第三个文件中。
  C++的存储方案决定了变量保留在内存中的时间(储存持续性)以及程序的哪一部分可以访问它(作用域和链接性)。自动变量是在代码块(如函数体或函数体中的代码块)中定义的变量，仅当程序执行到包含定义的
代码块时，它们才存在，并且可见。自动变量可以通过使用存储类型说明符.register或根本不使用说明符来声明，没有使用说明符时，变量将默认为自动的。register说明符提示编译器，该变量的使用频率很
高，但C++11摒弃了这种用法。
  静态变量在整个程序执行期间都存在。对于在函数外面定义的变量，其所属文件中位于该变量的定义后面的所有函数都可以使用它(文件作用域),并可在程序的其他文件中使用(外部链接性)。另一个文件要使用这
种变量，必须使用extern关键字来声明它。对于文件间共享的变量，应在一个文件中包含其定义声明(无需使用extern,但如果同时进行初始化，也可使用它),并在其他文件中包含引用声明(使用extern且不初始化)。
在函数的外面使用关键字static定义的变量的作用域为整个文件，但是不能用于其他文件(内部链接性)。在代码块中使用关键字static定义的变量被限制在该代码块内(局部作用域、无链接性),但在整个程序执行期
间，它都一直存在并且保持原值。
在默认情况下，C++函数的链接性为外部，因此可在文件间共享；但使用关键字static限定的函数的链接性为内部的，被限制在定义它的文件中。
  动态内存分配和释放是使用new和delete进行的，它使用自由存储区或堆来存储数据。调用new占用内存，而调用delete释放内存。程序使用指针来跟踪这些内存单元。
  名称空间允许定义一个可在其中声明标识符的命名区域。这样做的目的是减少名称冲突，尤其当程序非常大，并使用多个厂商的代码时。可以通过使用作用域解析运算符、using声明或using编译指令，来使名称空
间中的标识符可用。
