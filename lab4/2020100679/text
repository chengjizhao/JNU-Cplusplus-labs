第5章：循环和关系表达式
- `for` 循环用于重复执行一段代码，包括初始化、循环条件和循环增量。
- `while` 循环用于在满足一定条件时重复执行一段代码。
- `do-while` 循环先执行一次代码块，然后根据条件判断是否继续执行。
- 逻辑运算符（`&&`, `||`, `!`）用于组合和修改关系表达式的值。

第6章：分支语句和逻辑运算符
- `if` 语句用于根据条件执行不同的代码块。
- `else if` 语句可以在多个条件之间进行选择。
- `switch` 语句根据表达式的值跳转到匹配的 `case` 分支。
- 条件运算符（三元运算符 `?:`）提供了一种简洁的条件赋值方式。

第7章：函数--C++的编程模块
- 函数允许将一段代码封装为可重用的模块，并通过参数和返回值与其他代码进行交互。
- 函数定义包括函数头和函数体，函数头指定函数名称、参数列表和返回类型。
- 函数原型声明了函数的接口，告诉编译器函数的名称、参数和返回类型。
- 函数可以有默认参数，调用函数时可以省略对应的实参。
- 递归函数是指在函数体内调用自身的函数。

第8章：函数探幽
- 函数可以通过引用参数来修改调用者传递的变量。
- 函数可以返回引用类型，允许将函数的返回值直接赋给其他变量。
- 函数可以被重载，即定义多个同名但参数列表不同的函数。
- 内联函数使用 `inline` 关键字进行定义，在编译时将函数的代码插入到调用处，提高执行效率。

第9章：内存模型和名称空间
- 变量的作用域是其可见性的范围，局部变量的作用域通常限于其所在的块。
- 静态局部变量在函数被调用时初始化，但保持其值直到程序结束。
- 全局变量是在所有函数之外定义的变量，其作用域为整个程序。
- 名称空间提供了一种组织和管理程序标识符的方式，可以避免名称冲突。
- 使用 `using` 声明可以简化对名称空间中标识符的访问。

1. `external`：`external`是默认的存储类别说明符。对于全局变量和函数而言，默认情况下它们具有外部链接（external linkage），意味着它们可以在其他文件中访问。使用`extern`关键字可以显式地声明一个标识符具有外部链接。

2. `static`：`static`关键字可以用于不同的上下文中，具有不同的含义：
   - 对于全局变量或函数，`static`表示内部链接（internal linkage），使得它们只能在定义它们的文件中可见。
   - 对于局部变量，`static`将其存储期从自动（每次进入和退出作用域时创建和销毁）变为静态（在整个程序运行期间存在），并保持其值。
   - 对于类成员变量和函数，`static`将它们与类本身相关联，而不是与类的实例相关联。这意味着静态成员在任何类对象之间是共享的。

3. `namespace`：`namespace`用于创建一个命名的作用域，用于组织和隔离代码中的标识符。它提供了一种防止名称冲突的方式，允许不同的代码块、文件或库使用相同的标识符而不会发生冲突。通过将相关的标识符放在特定的命名空间中，可以限制其可见性，并使用`::`作用域解析运算符来访问其中的标识符。

关系总结：
- `external`和`static`关键字可以影响变量和函数的链接属性（可见性）。
- `namespace`提供了一种组织和隔离标识符的方式，以避免名称冲突。
- 在命名空间中，可以使用`static`关键字来限制标识符的可见性。
- 全局变量和函数可以具有`external`链接（默认情况），也可以使用`static`关键字具有`internal`链接。
- `static`关键字也可以用于局部变量和类成员，但与链接无关，它们的作用是控制存储期和可见性。
