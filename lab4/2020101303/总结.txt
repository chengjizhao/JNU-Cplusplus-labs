第五章 循环和关系表达式
C++提供了for、while和do while三种循环。它们的使用方式与常规C语言相同。for循环和while循环都是入口条件循环，即程序将在执行循环体中的语句之前检查测试条件。do while循环是出口条件循环，即程序在执行循环体中的语句之后检查条件，循环体中的语句至少会执行一次。
基于范围的for循环可以对数组或容器类（vector和array）的每个元素执行相同的操作。eg：for (double x : prices)，for (double &x : prices)。
cin >> ch是将输入的下一个字符读入到ch，但会忽略空格、换行符和制表符；cin.get(ch)是将下一个任意字符读入到ch，返回的是一个对象，而不是读取的字符；ch = cin.get()与C语言中的getchar相似，将字符编码作为int值返回。
嵌套循环是循环中的循环，适合处理二维数组。

第六章 分支语句和逻辑运算符
if语句使程序有条件地执行语句或语句块；if else语句使程序选择执行两个语句或语句块之一，也可以使用if else来提供一系列选项；switch语句引导程序执行一系列选项之一。
逻辑运算符：&&逻辑与；！逻辑非；||逻辑或。
条件运算符：？: 可用来替代if else语句，需要3个操作数。
continue：用于跳出当前循环中的一次迭代，继续执行下一次迭代；break：用于完全跳出当前循环（嵌套循环时不会影响到外层循环），继续执行循环之后的代码。
文件I/O与控制台I/O类似，声明ifstream和ofstream对象并将它们同文件关联起来后，可以像使用cin和cout那样使用这些对象。

第七章 函数
定义函数：可将函数分为两类，没有返回值的函数和有返回值的函数。没有返回值的函数称为void函数，有返回值的函数将生成一个值，并将它返回给调用函数，返回值可以是整数、浮点数、指针、结构和对象。C++函数不能直接返回数组，但可以将数组作为结构或对象组成部分来返回。
C++提供了3种表示C-风格字符串的方法：字符数组、字符串常量和字符串指针。它们的类型都是char*(char指针)，因此被作为char*类型参数传递给函数。C++使用空值字符(\0)来结束字符串，因此字符串函数检测空值字符来确定字符串的结尾。C++还提供了string类，用于表示字符串。函数可以接受string对象作为参数以及将string对象作为返回值。string类的方法size()可用于判断其存储的字符串的长度。
C++函数可以是递归的，即函数代码中可以包括对函数本身的调用。这个过程会无限循环下去，除非代码中包含终止调用链的内容。在需要将一项工作不断分为两项较小的、类似的工作时，递归非常有用。
C++函数名与函数地址的作用相同。通过将函数指针作为参数，可以传递要调用的函数的名称。
函数指针的基础知识：获取函数的地址：使用函数名（后面不带参数）即可；声明函数指针：声明应指定函数的返回类型以及函数的特征标；使用指针来调用函数。

第八章 函数探幽
内联函数是C++为提高程序运行速度所做的一项改进。内联函数的编译代码与其他程序代码“内联”起来，即编译器将使用相应的函数代码替换函数调用，对于内联代码，程序无需跳到另一个位置处执行代码再跳回来，因此内联函数运行速度比常规函数稍快，但代价是要占用更多内存。如果执行函数代码的时间比调用时间长，则节省的时间只占一小部分；而如果执行代码的时间很短，节省的时间绝对值并不大，除非函数被频繁调用。
要使用该特性，需要在函数声明前加上关键字inline，在函数定义前加关键字inline。
引用变量的主要用途是用作函数的形参。通过将引用变量用作参数，函数将使用原始数据，而不是其副本。
用&符号进行定义。其中，&是类型标识符的一部分，int &表示指向int的引用。
引用和指针的区别：声明引用时必须将其初始化，不能像指针那样先声明再赋值。
在使用函数时，引用作为参数和指针作为参数一样，如果只是使用变量的值，那么参数应该声明为const 修饰，这样就不能在函数中修改参数值。
默认参数指的是当函数调用中省略了实参时自动使用的一个值。
对于带参数列表的函数，必须从右向左添加默认值，即要为某个参数设置默认值，就必须为它右边的所有参数提供默认值。
实参按从左到右的顺序依次被赋给相应的形参，而不能跳过任何参数。
函数重载的关键是函数的参数列表。如果两个函数的参数数目和类型相同，设置默认值必须通过函数原型，编译器通过查看原型来了解函数所使用的参数数目。
函数模板是一种通用的函数定义，可以用于生成特定类型的函数。编译器会根据函数调用时的实际参数类型推导出合适的函数模板实例化。

第九章 内存模型和名称空间
C++鼓励程序员在开发程序时使用多个文件。一种有效的组织策略是，使用头文件来定义用户类型，为操纵用户类型的函数提供函数原型，并将函数定义放在一个独立的源代码文件中。头文件和源代码文件一起定义和实现了用户定义的类型及其使用方式。最后，将main( )和其他使用这些函数的函数放在第三个文件中。
静态变量在整个程序执行期间都存在。对于在函数外面定义的变量，其所属文件中位于该变量的定义后面的所有函数都可以使用它，并可在程序的其他文件中使用（外部连接性）。另一个文件要使用这种变量，必须使用extern关键字来声明它。对于文件间共享的变量，应在一个文件中包含其定义声明（无需使用extern，如果同时进行初始化，也可以使用），并在其他文件中包含引用声明（使用extern且不初始化）。在函数的外面使用关键字static定义的变量的作用域为整个文件，但是不能用于其他文件（内部链接性）。在代码块中使用关键字static定义的变量被限制在该代码块内，但在整个程序执行期间，它都一直存在并且保持原值。
动态内存分配和释放是使用new和delete进行的，它使用自由存储区或堆来存储数据。调用new占用内存，而调用delete释放内存。
名称空间允许定义一个可以在其中声明标识符的命名区域。这样做的目的是减少名称冲突。可以通过使用作用域解析运算符、using声明或using编译指令，来使名称空间中的标识符可用。
