c++ primer plus
第五章循环和关系表达式
C++的6种关系操作符：
<	小于 
>	大于
<=	小于或等于
>=	大于或等于
==	等于
!=	不等于
for循环执行重复操作的步骤：1.设置初始值。2.执行测试，看看循环是否应当继续执行。3.执行循环操作。4.更新用于测试的值。
C++并没有将test-expression的值限制为只能为真或假，可以使用任意表达式，C++将强制把结果转换为bool类型。
复合语句块：for循环体内可以包含多条语句，用花括号包起来。
在复合语句块中定义的变量有以下特点：
只在语句块内生效，循环结束后释放。若定义的变量名在之前已经使用了，那么在循环执行过程中将发生隐藏（新变量将旧变量藏起来），循环结束后还原。
逗号运算符：允许将两条表达式放在同一位置。如for (i = 0,j = 99 ; i < j ; i ++,j++)
while循环是没有初始化和更新部分的for循环，它只有测试条件和循环体。clock()可以返回程序开始执行后所用的系统时间。
do while循环是出口条件循环，至少会执行一次，其他地方与while循环一致
嵌套循环和二维数组是 C++ 语言中常用的概念，通常一起使用，以便对多维数组进行遍历和处理。
EOF值必须不同于任何有效的字符值，以便程序不会将EOF与常规字符混淆。通常EOF被定义为值-1。由于EOF表示的不是有效字符编码，因此不能与char类型兼容。如果使用cin.get()并测试EOF，则必须将返回值赋给int变量。
第六章  分支语句和逻辑运算符。
if语句是让程序能够决定是否执行特定的语句。
if else 语句则让程序执行两条语句或语句块中的哪一条。
if else if else结构可以用于在不同的条件下执行不同的代码块。它用于处理多种场景，例如根据不同的用户输入显示不同的页面，或者根据不同的列表项选择不同的操作。
逻辑运算符:&&	逻辑与（AND）运算符。如果两个操作数都非零，则条件为真。||	逻辑或（OR）运算符。如果两个操作数中任意一个非零，则条件为真。!	逻辑非（NOT）运算符。用来逆转操作数的逻辑状态。如果条件为真，则逻辑非运算符使其转为假。
switch语句允许测试一个变量等于多个值时的情况。
continue语句用于跳出当前循环中的一次迭代，继续执行下一次迭代。如果在循环中遇到continue语句，程序会跳过当前迭代的余下部分，然后继续执行循环中的下一次迭代。
break语句用于完全跳出当前循环。如果在循环中遇到break语句，程序会完全跳出循环，并继续执行循环之后的代码。
在嵌套循环中，break语句的作用是跳出当前循环，并不会影响到外层循环。而continue语句则只能跳过当前循环中的一次迭代。
第七章函数——C++的编程模块
要使用C++函数必须完成的工作：
提供函数定义
提供函数原型
调用函数
定义函数：可将函数分为两类，没有返回值的函数和有返回值的函数。
对于返回值的函数，必须使用返回语句以便将值返回给调用函数。返回值可以是常量、变量、表达式。C++对返回值的类型有一定的限制：不能是数组。也可以是 其他的任何类型（整数、浮点数、指针、甚至是结构和对象）。函数定义命令被调用函数应返回什么类型的数据。
在C++中，可以将指针声明为const指针。const指针是指针常量，其指向的地址是固定的，不可以被改变。同时，也可以将指向const数据的指针声明为const指针，即指向const数据的指针常量。这种指针在函数参数中被用到时，被称为const指针参数。
使用const指针参数可以防止函数内部对指针所指向的数据进行修改，在一些需要保护数据的情形下使用，提高代码的安全性。
函数调用自身的过程被称为递归。递归函数应该遵循以下两个重要的规则：
1.基本情况（也称作递归终止条件）：递归函数必须包含一个基本情况，当满足该情况时，递归将停止调用自身。
2.递归情况：递归函数必须包含一个递归情况，当满足该情况时，函数将调用自身。
指向函数的指针
1.获取函数的地址
获取函数地址的方式：使用函数名（后面不带参数）即可。要将函数作为参数传递，必须传递函数名。一定要区分传递的是函数地址还是函数的返回值。
2.声明函数指针
声明指向某种数据类型的指针时，必须指定指针指向的类型。对于函数而言，声明指向函数的指针时，也必须指定指针指向的函数类型。也就是说，声明应像函数原型一样指出函数的信息。
第八章
1.编译器将内联函数代码替换函数调用，函数声明和定义之前加关键字inline，内联函数不能递归
2.引用是已定义变量的别名，引用变量主要是用作函数的参数，函数将使用参数原始版本而不是副本，必须在声明引用变量时将其初始化，一旦初始化完成，将不能再成为其他变量的引用
3.想使用引用，又不想修改变量的值，可以使用const int &a
4.如果函数实参与引用参数不匹配，仅当参数为const引用时，C++将生成临时变量，使该引用指向临时变量，生成临时变量的情况
1）实参类型正确，但不是左值
2）实参类型不正确，但可以转换为正确的类型
5.将引用用于结构，可以节省内存和时间
6.基类引用可以指向派生类对象，而无需进行强制类型转换
7.对于类，参数一般使用引用而不使用指针
8.默认参数是指函数调用中省略了实参时自动使用的一个值，默认参数通过函数原型来设置，要为某个参数设置默认值，则其右边所有的参数都必须设置默认值
9.函数多态（重载）能够使用多个同名的函数（条件是两个函数的特征标不一致），参数数目和类型相同，同时参数的排列顺序也相同，则特征标一致，类型引用与类型本身为同一个特征标
10.如果需要将同一种算法用于不同类型的函数，可以使用模板，最终生成的代码不包含任何模板，只包含了为程序生成的实际函数，可能有多个独立的函数定义
11.模板可以重载，模板可以显示具体化，非模板函数优先具体化和常规模板，具体化优于常规模板
第九章内存模型和名称空间
头文件中常包含的内容:
函数原型、使用#define或const定义的符号常量、结构声明、类声明、模板声明、内联函数
作用域：描述了名称在文件的多大范围内可见。
链接域：描述了名称如何在不同单元间共享。
作用域为局部变量只在定义它的代码块中可用。代码块是由花括号括起来的一系列语句。
静态持续变量:
编译器将分配固定的内存块来存储所有的静态变量，这些变量在整个程序执行期间一直存在。
静态存储持续变量有3种链接性:
外部链接性（可在其他文件中访问）
内部链接性（只能在当前文件中访问）
无链接性（只能在当前函数或代码块中访问）
外部链接性:
定义声明（简称定义），给变量分配存储空间
引用声明（简称声明），不给变量分配存储空间，它引用已有的变量。引用声明使用关键字extern，不进行初始化，否则报错多重定义。
内部链接性:
将static限定符用于作用域为整个文件的变量时，该变量的链接性将为内部的。
两个文件声明的常规外部变量相同，静态变量将隐藏常规外部变量
无链接性:
将static限定符用于在代码块中定义的变量，为无链接性的静态局部变量。
const限定符
限定符volatile：编译器不会对该变量进行优化，从而可以提供对特殊地址的稳定访问。
mutable：即使结构体或者类为const类型，但被mutable修饰的成员也可以被修改。
动态内存由运算符new和delete控制，而不是由作用域和链接性规则控制。
通常，编译器使用三块独立的内存
用于存放静态变量
用于自动变量
用于动态存储
定位 new 运算符
定位new运算符，能够在指定内存地址存放变量。不管它是否已经被使用，新值直接覆盖在旧值上面。
