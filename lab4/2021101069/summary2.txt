第5章 循环和关系表达式
循环语句：for、while、do-while、嵌套循环、break、continue。
条件表达式：if、else、switch、case。
逻辑运算符：&&、||、！。
位运算符：&、|、^、~、<<、>>。
自增自减运算符：++、--。
赋值运算符：=、+=、-=、*=、/=、%=、&=、|=、^=、<<=、>>=。
关系运算符：<、>、<=、>=、==、!=。
算术运算符：+、-、*、/、%、++、--。
类型转换：自动类型转换、强制类型转换。
表达式中的括号：圆括号、方括号
第6章 分支语句和逻辑表达式
 分支语句：if、if-else、if-else if-else、switch、case、break、default。
逻辑运算符：&&（逻辑与）、||（逻辑或）、！（逻辑非）。
条件运算符（三目运算符）：？：。
布尔类型：true（真）、false（假）。
关系运算符：<（小于）、>（大于）、<=（小于等于）、>=（大于等于）、==（等于）、!=（不等于）。
相等运算符：==（等于）、!=（不等于）。
赋值运算符：=（赋值）、+=（加等于）、-=（减等于）、*=（乘等于）、/=（除等于）、%=（模等于）、&=（按位与等于）、|=（按位或等于）、^=（按位异或等于）、<<=（左移等于）、>>=（右移等于）。
自增自减运算符：++（自增）、--（自减）。
位运算符：&（按位与）、|（按位或）、^（按位异或）、~（按位取反）、<<（左移）、>>（右移）。
逗号运算符：,（逗号）。
类型转换：自动类型转换、强制类型转换。
常量：const。
枚举类型：enum。
作用域限定符：：（作用域限定符）。
表达式中的括号：圆括号、方括号。
第7章函数 c++的编程模块
函数：函数是 C++ 程序的基本构建块之一，用于执行特定的任务。函数由函数名、参数列表和函数体组成。参数列表包括参数的类型、顺序和参数名。函数体包括局部变量、语句和返回值。
函数定义：函数定义包括函数名、返回类型、参数列表和函数体。返回类型指定函数返回的值的数据类型。如果函数没有返回值，则返回类型为 void。
函数声明：函数声明用于向程序中的其他部分通知函数的名称、返回类型和参数列表。函数声明通常放在头文件中。
函数调用：函数调用包括函数名、左括号、参数列表和右括号。参数列表包括传递给函数的实际参数。函数调用可以出现在表达式中或作为语句的一部分。
函数参数：函数参数可以是基本类型、数组、指针、引用或自定义类型。参数传递方式可以是传值或传引用。传值方式将参数的值复制到函数中，而传引用方式将参数的地址传递到函数中。
函数重载：函数重载允许在同一作用域中定义多个同名函数，但它们必须具有不同的参数类型或数量。函数重载提高了代码的可读性和可用性。
递归函数：递归函数是调用自身的函数。递归函数必须有一个结束条件，以防止无限递归。
编程模块：C++ 程序通常由多个文件组成，其中包括头文件和源文件。头文件包含函数声明、类定义和其他需要在多个文件中共享的代码。源文件包含函数定义和其他实现代码。
头文件保护：头文件保护用于防止头文件在同一编译单元中被多次包含。头文件保护使用条件编译指令来实现。
命名空间：命名空间用于将标识符组织成逻辑组，以避免命名冲突。命名空间可以是全局的或局部的，可以包含变量、函数、类和其他标识符。
第8章函数探幽
函数指针：函数指针是指向函数的指针变量。函数指针可以用于调用函数、作为函数参数传递和作为函数返回值返回。
函数指针的声明：函数指针的声明包括函数返回类型、函数指针变量名和参数列表。例如，int (*fp)(int) 声明了一个名为 fp 的函数指针，该函数返回一个整数并接受一个整数参数。
函数指针的使用：可以使用函数指针来调用函数。例如，使用 (*fp)(5) 调用 fp 指向的函数并传递参数 5。
函数指针作为函数参数：可以将函数指针作为函数参数传递给其他函数。这样，其他函数可以使用该函数指针来调用指定的函数。
函数指针作为函数返回值：可以将函数指针作为函数的返回值返回。这样，可以返回一个指向函数的指针，以便在其他地方使用该函数。
指向重载函数的函数指针：指向重载函数的函数指针必须指定函数的参数类型，以便正确地匹配重载函数的版本。例如，如果有一个名为 add 的重载函数，一个接受整数参数，另一个接受浮点数参数，则可以使用 int (*fp)(int) 和 float (*fp)(float) 来声明指向这些函数的函数指针。
指向类的成员函数的函数指针：指向类的成员函数的函数指针必须指定类名和成员函数名。例如，如果有一个名为 cls 的类和一个名为 mem 的成员函数，则可以使用 void (cls::*ptr)(int) 来声明指向该成员函数的函数指针。
指向类的成员函数的指针的使用：可以使用指向类的成员函数的指针来调用该成员函数。例如，使用 (obj.*ptr)(arg) 来调用 obj 对象的 ptr 指向的成员函数并传递参数 arg。
指向类的成员函数的指针作为函数参数：可以将指向类的成员函数的指针作为函数参数传递给其他函数。这样，其他函数可以使用该指针来调用指定的成员函数。
指向类的成员函数的指针作为函数返回值：可以将指向类的成员函数的指针作为函数的返回值返回。这样，可以返回一个指向成员函数的指针，以便在其他地方使用该成员函数。
第9章内存模型和名称空间
内存模型：C++ 的内存模型包括栈、堆、全局/静态存储区和常量存储区。栈用于存储局部变量和函数调用，堆用于动态内存分配，全局/静态存储区用于存储全局变量和静态变量，常量存储区用于存储常量。
名称空间：名称空间用于将标识符组织成逻辑组，以避免命名冲突。名称空间可以是全局的或局部的，可以包含变量、函数、类和其他标识符。
名称空间的定义：名称空间的定义使用 namespace 关键字，后面跟着名称空间的名称。例如，使用 namespace myNamespace { ... } 来定义一个名为 myNamespace 的名称空间。
名称空间的使用：可以使用 using 声明或 using 指令来使用名称空间中的标识符。using 声明用于在特定范围内引入名称空间中的标识符，例如，使用 using std::cout; 来引入标准库中的 cout 标识符。using 指令用于将整个名称空间引入到当前范围内，例如，使用 using namespace std; 来引入标准库中的所有标识符。
名称空间的嵌套：名称空间可以嵌套，允许将标识符组织成层次结构。例如，可以使用 namespace myNamespace { namespace mySubNamespace { ... } } 来定义一个名为 mySubNamespace 的子名称空间。
无名名称空间：无名名称空间用于在全局范围内定义变量和函数，以避免命名冲突。无名名称空间中的标识符可以使用 :: 运算符来访问，例如，使用 ::myVariable 来访问无名名称空间中的 myVariable 变量。
动态内存分配：C++ 提供了 new 和 delete 运算符用于动态内存分配和释放。new 运算符用于分配内存并返回指向分配内存的指针，delete 运算符用于释放已分配的内存。
内存泄漏：内存泄漏是指程序在不再需要内存时没有正确释放内存，导致系统资源浪费和程序性能下降。应该在使用完动态分配的内存后使用 delete 运算符释放该内存。
内存越界：内存越界是指程序访问超出分配给它的内存范围，导致程序崩溃或数据损坏。应该确保在使用数组或指针时不会越界访问内存。
内存对齐：内存对齐是指将数据存储在内存中的特定地址，以便提高访问速度和减少缓存冲突。C++ 提供了 alignas 和 alignof 运算符用于指定和查询数据类型的对齐要求。