第五章 循环和关系表达式
5.1 主要讲了for循环的作用以及组成部分，并举例了for循环的应用场景以及相应的一些语句的使用方法
5.2主要讲得是while循环的结构与用法，并与for循环做了对比
5.3 do while循环的结构与用法
5.4介绍了基于范围的for循环
5.5介绍了循环与文本读入
5.6介绍了嵌套循环与二位数组，以及二维数组的初始化以及使用的方法
5.7总结了for，while，do while三种循环的共同点与差异，以及文本读入的方法的总结
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
第六章 分支语句与逻辑运算符
主要包括了：if语句,if else语句,逻辑运算符，字符函数库，条件运算符，Switch语句，continue与break语句，读取数字的循环，基本文件的输入与输出

6.1、主要介绍了if语句，if else语句
if用法与while相似 
if else语句可以让程序橘耳钉执行两条语句或语句块中的某一条
格式化：当需要多条if else语句时，需要用大括号将语句块括起来

6.2逻辑运算符
or或：||表示满足其一即可  and与：&&表示两者皆需满足
可以用&&来设置取值范围
逻辑运算符的运算优先级都低于关系运算符

6.3字符函数库cctype
该函数库可以简化诸如确定字符是否为大写字母、数字、标点符号等工作。

6.4 ？：运算符
？：是一个三相运算符，可以用来在两个数据中进行二选一

6.5 switch语句
可以进行多个选项的选择

6.6 break和continue
break：跳出循环  continue：跳过本次循环中剩下的代码进入下一循环

6.7用cin读取数字的循环
6.8简单文件的输入输出

6.9 总结
C++提供了if语句、if else语句和switch语句来管理选项。C++还提供了帮助决策的运算符。第5章讨论了关系表达式，这种表达式对两个值进行比较。
cctype字符函数库提供了一组方便的、功能强大的工具，可用于分析字符输入。
对于文件I/O来说，循环和选择语句是很有用的工具；文件I/O与控
制台I/O极其相似。声明ifstream和ofstream对象，并将它们同文件关联起
来后，便可以像使用cin和cout那样使用这些对象。

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

第七章 C++编程模块
7.1介绍了函数的基本知识：（1）、函数定义（2）、函数原型（3）、调用函数

7.2函数参数和按值传递
C++通常按值传递参数，这意味着将
数值参数传递给函数，而后者将其赋给一个新的变量。

7.3函数和数组
int * arr，int arr [ ]都可用来声明数组。此时，程序实际上并没有将数组内容
传递给函数，而是将数组的位置（地址）、包含的元素种类（类型）以
及元素数目（n变量）提交给函数
使用数组区间的函数：传统的C/C++方法
是，将指向数组起始处的指针作为一个参数，将数组长度作为第二个参数（指针指出数组的位置和数据类型），样便给函数提供了找到所有数据所需的信息。还有另一种给函数提供所需信息的方法，即指定元素区间
（range），这可以通过传递两个指针来完成：一个指针标识数组的开头，另一个指针标识数组的尾部。

7.4函数和二维数组
 为编写将二维数组作为参数的函数，必须牢记，数组名被视为其地
址，因此，相应的形参是一个指针，就像一维数组一样。

7.5函数和C-风格字符串
C-风格字符串由一系列字符组成，以空值字符结尾。前面介绍的大
部分有关设计数组函数的知识也适用于字符串函数。
假设要将字符串作为参数传递给函数，则表示字符串的方式有三种：
char数组；
用引号括起的字符串常量（也称字符串字面值）；
被设置为字符串的地址的char指针

7.6 函数和结构
当结构比较小时，按值传递结构最合理

7.7函数和string对象
虽然C-风格字符串和string对象的用途几乎相同，但与数组相比，
string对象与结构的更相似。

7.8函数与array对象
在C++中，类对象是基于结构的，因此结构编程方面的有些考虑因
素也适用于类。例如，可按值将对象传递给函数，在这种情况下，函数
处理的是原始对象的副本。另外，也可传递指向对象的指针，这让函数
能够操作原始对象。

7.9递归
即函数自己调用自己

7.10函数指针
与数据项相似，函数也有地址。函数的地址是存储其机器语言代码
的内存的开始地址。通常，这些地址对用户而言，既不重要，也没有什
么用处，但对程序而言，却很有用。例如，可以编写将另一个函数的地
址作为参数的函数。这样第一个函数将能够找到第二个函数，并运行
它。与直接调用另一个函数相比，这种方法很笨拙，但它允许在不同的
时间传递不同函数的地址，这意味着可以在不同的时间使用不同的函
数。
获取函数的地址；
声明一个函数指针；
使用函数指针来调用函数。

7.11总结
函数是C++的编程模块。要使用函数，必须提供定义和原型，并调
用该函数。函数定义是实现函数功能的代码；函数原型描述了函数的接
口：传递给函数的值的数目和种类以及函数的返回类型。函数调用使得
程序将参数传递给函数，并执行函数的代码。
在默认情况下，C++函数按值传递参数。这意味着函数定义中的形
参是新的变量，它们被初始化为函数调用所提供的值。因此，C++函数
通过使用拷贝，保护了原始数据的完整性。
C++将数组名参数视为数组第一个元素的地址。从技术上讲，这仍
然是按值传递的，因为指针是原始地址的拷贝，但函数将使用指针来访
问原始数组的内容。当且仅当声明函数的形参时，下面两个声明才是等
价的：

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

第八章 函数探幽
主要包括：内联函数，引用变量，如何按引用传递函数参数，默认参数，函数重载，函数模板，函数模板具体化。

8.1c++内联函数
内联函数的编译代码与其他程序代码“内联”起来了。也就是说，编译器将使用相应的函数代码替换函数调用。对于内联代码，程序无需跳到另一个位置处执行代码，再跳回来。因此，内联函数的运行速度比常规函数稍快，但代价是需要占用更多内存。

8.2引用变量
C++给&符号赋予了另一个含义，将其用来声明引用。例如
int rats;
int &rodent=rats;

·引用变量还可做函数参数
·引用非常适合用于结构和类（C++的用户定义类型）。确实，引入引用主要是为了用于这些类型的，而不是基本的内置类型。使用结构引用参数的方式与使用基本变量引用相同，只需在声明结构参数时使用引用运算符&即可。
·将类对象传递给函数时，C++通常的做法是使用引用。例如，可以通过使用引用，让函数将类string、ostream、istream、ofstream和ifstream等类的对象作为参数。

使用引用参数的主要原因有两个。
程序员能够修改调用函数中的数据对象。
通过传递引用而不是整个数据对象，可以提高程序的运行速度。

8.3默认参数
默认参数指的是当函数调用中省略了实参时自动使用的一个值。这极大地提高了使用函数的灵活性。

8.4函数重载
函数多态是C++在C语言的基础上新增的功能。默认参数让您能够使用不同数目的参数调用同一个函数，而函数多态（函数重载）让您能够使用多个同名的函数。
仅当函数基本上执行相同的任务，但使用不同形式的数据时，才应采用函数重载。

8.5函数模板
函数模板是通用的函数描述，也就是说，它们使用泛型来定义函数，其中的
泛型可用具体的类型（如int或double）替换。通过将类型作为参数传递
给模板，可使编译器生成该类型的函数。

8.6总结

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
第九章 内存模型和名称空间
单独编译。
存储持续性、作用域和链接性。
定位（placement）new运算符。
名称空间。

9.1单独编译
和C语言一样，C++也允许甚至鼓励程序员将组件函数放在独立的文件中。可以单独编译这些文件，然后将它们链接成可执行的程序。（通常，C++编译器既编译程序，也管理链接器。）如果只修改了一个文件，则可以只重新编译该文件，然后将它与其他文件的编译版本链接。这使得大程序的管理更便捷。

9.2储存持续性、作用域和链接性
自动存储持续性：在函数定义中声明的变量（包括函数参数）的存
储持续性为自动的。它们在程序开始执行其所属的函数或代码块时
被创建，在执行完函数或代码块时，它们使用的内存被释放。
C++有两种存储持续性为自动的变量。
静态存储持续性：在函数定义外定义的变量和使用关键字static定义
的变量的存储持续性都为静态。它们在程序整个运行过程中都存
在。C++有3种存储持续性为静态的变量。
线程存储持续性（C++11）：当前，多核处理器很常见，这些CPU
可同时处理多个执行任务。这让程序能够将计算放在可并行处理的
不同线程中。如果变量是使用关键字thread_local声明的，则其生命
周期与所属的线程一样长。
动态存储持续性：用new运算符分配的内存将一直存在，直到使用
delete运算符将其释放或程序结束为止。这种内存的存储持续性为
动态，有时被称为自由存储（free store）或堆（heap）


9.3名称空间
在C++中，名称可以是变量、函数、结构、枚举、类以及类和结构的成员。当随着项目的增大，名称相互冲突的可能性也将增加。使用多个厂商的类库时，可能导致名称冲突。例如，两个库可能都定义了名为List、Tree和Node的类，但定义的方式不兼容。用户可能希望使用一个库的List类，而使用另一个库的Tree类。这种冲突被称为名称间问题。
·声明区域是可以在其中进行声明的区域。例如，可以在函数外面声明全局变量，对于这种变量，其声明区域为其声明所在的文件。对于在函数中声明的变量，其声明区域为其声明所在的代码块。
·变量的潜在作用域从声明点开始，到其声明区域的结尾。因此潜在作用域比声明
区域小，这是由于变量必须定义后才能使用。

C++新增了这样一种功能，即通过定义一种新的声明区域来创建命
名的名称空间，这样做的目的之一是提供一个声明名称的区域。一个名
称空间中的名称不会与另外一个名称空间的相同名称发生冲突，同时允
许程序的其他部分使用该名称空间中声明的东西。


总结
extern关键字用来声明变量，或者函数名以及对象名在其他文件中已经定义过，它通常只是起到一个说明的作用，只是告诉编译器这个变量来自其他文件，编译器会根据这个它提供的变量和名字在其他文件中查找。static关键字和未命名空间的作用相同，是文件级别的静态变量，也就是说它所定义的变量只能在使用它的文件中使用，而在其他文件中必须显示的包含它才可以使用（一般是使用#include包含static所在的文件）。static与extern的区别是：static是内部链接，extern是外部链接，static定义的变量只能在此变量的文件中使用，而extern则将它所声明的变量链接到其他文件，以便于链接器查找到此变量的定义部分。namespace只能在全局范畴内定义。


