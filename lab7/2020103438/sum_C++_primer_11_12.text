第11章
1. 类和对象： 在OOP中，类是一种用户自定义数据类型，它可以包含数据成员（属性）和成员函数（方法）。对象是类的实例，可以访问类的成员。
2. 封装和数据隐藏： 通过将数据成员设置为私有，可以隐藏类的内部实现细节，只允许通过成员函数来访问和修改数据。这有助于实现封装，提高了代码的安全性。
3. 构造函数和析构函数： 构造函数用于初始化对象，而析构函数用于清理对象。它们在对象的创建和销毁时自动调用。
4. 继承： 继承允许创建一个新的类，它可以继承一个或多个现有类的属性和方法。这提高了代码的重用性。
5. 多态性： 多态性允许不同的对象对相同的方法进行不同的响应。通过虚函数和动态绑定，可以在运行时确定调用哪个方法，从而增加了代码的灵活性。
6. 抽象类和接口： 抽象类是不能实例化的类，通常用于定义接口和规范子类的行为。C++中使用纯虚函数定义抽象类。
7. 运算符重载： C++允许对内置运算符进行重载，以便它们能够用于自定义类。这提供了更自然的语法来执行对象的操作。

第12章
1. 动态内存分配： C++允许在运行时分配和释放内存，这对于处理变量大小的数据结构或需要动态生命周期的对象非常重要。new 和 delete 操作符用于分配和释放动态内存。
2. 深拷贝和浅拷贝： 当类中包含动态分配的内存时，需要注意深拷贝和浅拷贝的区别。深拷贝会复制对象的所有数据，而浅拷贝只会复制指向相同数据的指针。
3. 模板： 模板是一种通用编程工具，允许编写可以用于不同数据类型的代码。类模板和函数模板分别用于创建通用类和函数。
4. STL（标准模板库）： STL包含了许多通用数据结构和算法的模板，如容器、算法和迭代器。STL的使用可以大大简化数据结构和算法的实现。
5. 异常处理： C++提供了异常处理机制，允许程序员处理运行时错误。通过try和catch块，可以编写能够处理异常情况的代码，提高了程序的健壮性。
6. 操作符重载： 第12章还继续介绍了操作符重载，这对于自定义类的操作符行为非常有用，例如，操作符<<用于重载以支持直接输出自定义类的对象。