第11章使用类
1.类的定义和对象的创建：类是自定义数据类型的模板，而对象是类的实例。我们可以通过定义类来创建自定义的数据类型，然后通过创建对象来使用这些类型。
2.类的成员函数：类可以包含成员函数，这些函数可以在对象上执行操作。成员函数可以是静态的、虚的或纯虚的，这取决于它们的行为。
3.构造函数和析构函数：构造函数是在创建对象时自动调用的函数，用于初始化对象的状态。析构函数是在销毁对象时自动调用的函数，用于清理对象的状态。
4.访问修饰符：类中的成员可以有不同的访问修饰符，如public、protected和private。这些修饰符决定了类的成员可以被访问的范围。
5.类的实例化：通过定义类和使用关键字class来创建类的实例。然后可以使用对象来调用类的方法和访问类的属性。
6.类的应用：通过使用类，我们可以创建可重用的代码块，并且可以更好地组织和管理代码。类还可以用于创建复杂的程序结构，例如继承和多态。
第12章类和动态内存分配
1.动态内存分配：动态内存分配是指在程序运行时分配内存空间。使用动态内存分配可以让我们更加灵活地管理内存，但同时也需要更加谨慎地处理内存管理问题，以避免内存泄漏和悬挂指针等问题。
2.类和动态内存分配：类和对象可以用于管理动态内存分配。通过使用类和对象，我们可以更加清晰地定义数据结构和操作，并且可以更加方便地管理内存。
3.构造函数和析构函数：构造函数和析构函数是类中特殊的成员函数，用于初始化和清理对象。构造函数用于初始化对象的状态，而析构函数用于释放对象使用的资源，例如动态分配的内存。
4.动态内存分配的语法：在C++中，可以使用new和delete操作符来动态分配和释放内存。new操作符用于分配内存，而delete操作符用于释放内存。
5.避免内存泄漏：内存泄漏是指程序在分配内存后未能及时释放，导致内存消耗不断增加。为了避免内存泄漏，我们应该在使用完动态分配的内存后及时释放，并且应该避免产生悬挂指针。
6.悬挂指针：悬挂指针是指指向已经释放的内存空间的指针。为了避免悬挂指针，我们应该在使用完动态分配的内存后及时将指针设置为nullptr。
7.类的应用：通过使用类和对象来管理动态内存分配，我们可以创建更加复杂的数据结构和算法，并且可以更加方便地管理程序中的资源。