第11章：运算符重载、友元函数、重载<<运算符、状态成员、使用rand()生成随机值、类的自动转换和强制类型转换以及类转换函数。
1. 运算符重载：
运算符重载允许你为用户自定义的类定义运算符操作，使得你可以使用类似内置类型的运算符，如+、-、* 等，对自定义类型执行操作。
2. 友元函数：
友元函数是一种能够访问类的私有成员的非成员函数。本章介绍了如何创建友元函数以及如何使用友元函数来访问类的私有部分。
3. 重载<<运算符：
通过重载流插入运算符 `<<`，你可以自定义类对象的输出方式，从而使类的对象能够直接通过 `cout` 输出。
4. 状态成员：
状态成员是用于描述对象状态的成员。本章展示了如何在类中使用状态成员来跟踪对象的状态和行为。
5. 使用rand()生成随机值：
通过使用C++的标准库函数 `rand()`，你可以生成随机数，这对于模拟、游戏等应用非常有用。
6. 类的自动转换和强制类型转换：
C++允许类对象之间的自动转换，但这可能需要谨慎处理，因为会引入一些意外行为。此外，你还可以定义强制类型转换操作符，以更好地控制类型转换。
7. 类转换函数：
类转换函数是一种用于将类对象转换为其他类型的成员函数。这允许你自定义对象到其他类型的转换方式。


第12章：类和动态内存分配、构造函数、复制构造函数、重载赋值运算符、new运算符、静态类成员、定位new运算符、指针、抽象数据类型（ADT）。
1. 类成员的动态内存分配：
你可以使用 `new` 运算符来为类成员分配动态内存，从而允许类处理可变长度的数据，比如字符串。
2. 隐式和显式复制构造函数：
C++会为类自动生成复制构造函数，但你也可以显式定义自己的复制构造函数，以控制对象的复制行为。
3. 隐式和显式重载赋值运算符：
类似复制构造函数，C++会自动生成赋值运算符，但你可以显式重载它以自定义赋值操作。
4. 构造函数中使用new：
你可以在构造函数中使用 `new` 运算符来动态分配内存，这在处理动态大小的数据时非常有用。
5. 使用静态类成员：
静态类成员属于类而不是对象，可以用于跟踪类的状态或共享数据。
6. 定位new运算符：
定位new运算符允许你在已分配的内存上构造对象，这在一些特殊情况下非常有用。
7. 使用指向对象的指针：
指针可用于操作对象，允许你动态地创建、访问和管理对象。
8. 实现队列对象抽象数据类型（ADT）：
本章最后展示了如何使用类来实现抽象数据类型，具体示例是队列。

