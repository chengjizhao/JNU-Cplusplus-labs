第十一章 使用类
类是一种抽象数据类型，它封装了数据和操作。通过在类中定义成员变量和成员函数，我们可以创建具有特定属性和行为的对象。
在C++中，使用类需要以下几个步骤：
1.定义类：在类声明中定义类的成员变量和成员函数。
2.创建对象：使用关键字new或auto创建类的对象，并初始化对象的成员变量。
3.访问对象：通过对象名和成员运算符.访问对象的成员变量和成员函数。
4.析构对象：当对象不再需要时，使用关键字delete释放对象的内存空间。
通过使用类，我们可以将现实世界中的抽象概念或实体转换为程序中的对象。每个对象都有自己的属性和行为，这使得程序更加模块化和可维护。此外，通过继承和多态等特性，我们可以实现代码的重用和扩展，使程序更加灵活和可扩展。
第十二章 类和动态内存分配
类
类是一种重要的C++语言特性，它允许我们封装数据和操作。通过定义类，我们可以创建具有特定属性和行为的对象。
类具有以下特性：
封装：类可以封装数据成员和成员函数，从而保护数据并隐藏实现细节。
继承：类可以从其他类继承属性和行为，从而实现代码的重用和扩展。
多态：类可以定义多种形态，从而实现不同类型的对象间的交互和扩展。
在C++中，我们使用类声明来定义类，类声明包括类名、成员变量和成员函数。
动态内存分配
动态内存分配是在程序运行时分配内存的过程。在C++中，我们使用指针和动态内存分配函数来分配内存。指针是一个变量，它可以存储另一个变量的地址，而动态内存分配函数（如malloc和calloc）可以在内存中分配指定大小的空间，并返回指向该空间的指针。
使用动态内存分配的好处是可以根据需要动态地分配内存空间，而不必提前知道需要多少空间。这对于在程序运行时动态地创建对象非常有用，因为我们可以根据用户输入或其他条件来确定需要创建多少个对象。
总之，通过学习《C++ Primer Plus》第六版的第十二章，我了解了如何使用类和动态内存分配来创建灵活、可扩展和高效的程序。类是一种重要的编程工具，它允许我们封装数据和操作，并创建具有特定属性和行为的对象。动态内存分配允许我们在程序运行时根据需要动态地分配内存空间，从而创建灵活、高效的程序。