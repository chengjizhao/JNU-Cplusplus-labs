1.多线程基础知识
多线程编程是一种并发编程的范例，它允许程序同时执行多个线程，以提高程序的性能和响应能力。在C++中，标准库提供了一些用于
多线程编程的工具，包括std::thread、std::mutex、std::lock_guard、std::condition_variable以及一些与线程相关的其他设施。

2.std::thread
std::thread 是 C++11 引入的一个类，用于创建和管理线程。你可以使用 std::thread 的构造函数传递一个函数或可调用对象，然后调用 thread.join() 等待线程结束。
#include <iostream>
#include <thread>

void myFunction() {
    std::cout << "Hello from thread!" << std::endl;
}

int main() {
    std::thread myThread(myFunction);
    myThread.join();  // 等待线程结束
    return 0;
}

3.std::mutex 和 std::lock_guard
std::mutex 是互斥量，用于保护共享资源，防止多个线程同时访问。
std::lock_guard 是一个轻量级的 RAII（资源获取即初始化）类，用于自动锁定和解锁互斥量。
#include <iostream>
#include <thread>
#include <mutex>

std::mutex myMutex;

void sharedResourceFunction() {
    std::lock_guard<std::mutex> lock(myMutex);
    // 访问共享资源的代码
}

int main() {
    std::thread t1(sharedResourceFunction);
    std::thread t2(sharedResourceFunction);

    t1.join();
    t2.join();
    return 0;
}

4.std::condition_variable
std::condition_variable 是条件变量，用于在多线程间进行线程同步。它与互斥量一起使用，等待某个条件为真时才继续执行。
#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

std::mutex myMutex;
std::condition_variable myCV;
bool myFlag = false;

void waitForFlag() {
    std::unique_lock<std::mutex> lock(myMutex);
    myCV.wait(lock, [] { return myFlag; });
    std::cout << "Flag is true!" << std::endl;
}

void setFlag() {
    {
        std::lock_guard<std::mutex> lock(myMutex);
        myFlag = true;
    }
    myCV.notify_one();  // 通知等待的线程
}

int main() {
    std::thread t1(waitForFlag);
    std::thread t2(setFlag);

    t1.join();
    t2.join();
    return 0;
}

5.线程池
线程池是一组维护的线程，可以重复使用来执行多个任务，避免了线程的频繁创建和销毁。C++标准库没有直接提供线程池，但可以使用第三方库（如C++11 ThreadPool库）或手动实现。
#include <iostream>
#include <thread>
#include <vector>
#include <queue>
#include <functional>
#include <mutex>
#include <condition_variable>

class ThreadPool {
public:
    ThreadPool(size_t numThreads);
    ~ThreadPool();
    
    template <class F, class... Args>
    void enqueue(F&& f, Args&&... args);

private:
    std::vector<std::thread> workers;
    std::queue<std::function<void()>> tasks;
    std::mutex queueMutex;
    std::condition_variable condition;
    bool stop;
};

ThreadPool::ThreadPool(size_t numThreads) : stop(false) {
    for (size_t i = 0; i < numThreads; ++i) {
        workers.emplace_back([this] {
            while (true) {
                std::function<void()> task;
                {
                    std::unique_lock<std::mutex> lock(this->queueMutex);
                    this->condition.wait(lock, [this] { return this->stop || !this->tasks.empty(); });
                    if (this->stop && this->tasks.empty()) {
                        return;
                    }
                    task = std::move(this->tasks.front());
                    this->tasks.pop();
                }
                task();
            }
        });
    }
}

ThreadPool::~ThreadPool() {
    {
        std::unique_lock<std::mutex> lock(queueMutex);
        stop = true;
    }
    condition.notify_all();
    for (std::thread &worker : workers) {
        worker.join();
    }
}

template <class F, class... Args>
void ThreadPool::enqueue(F&& f, Args&&... args) {
    auto task = std::make_shared<std::packaged_task<void()>>(std::bind(std::forward<F>(f), std::forward<Args>(args)...));
    {
        std::unique_lock<std::mutex> lock(queueMutex);
        if (stop) {
            throw std::runtime_error("enqueue on stopped ThreadPool");
        }
        tasks.emplace([task]() { (*task)(); });
    }
    condition.notify_one();
}

int main() {
    ThreadPool pool(4);

    for (int i = 0; i < 8; ++i) {
        pool.enqueue([](int id) {
            std::cout << "Task " << id << " is running." << std::endl;
        }, i);
    }

    return 0;
}
