多线程编程的基础知识：
线程： 线程是进程中的执行单元，一个进程可以包含多个线程，它们共享进程的资源。
并发和并行：
并发（Concurrency）： 多个任务在同一时间段内执行，但不一定同时执行。
并行（Parallelism）： 多个任务在同一时刻执行。
互斥和同步：
互斥（Mutex）： 用于保护共享资源，防止多个线程同时访问导致的数据竞争。
同步： 协调线程之间的操作，确保它们按照一定的顺序执行。

C++中的多线程库：

std::thread： C++标准库提供的线程库，用于创建和管理线程。
///
#include <iostream>
#include <thread>

void myFunction() {
    std::cout << "Hello from thread!" << std::endl;
}

int main() {
    std::thread t(myFunction);
    t.join();  // 等待线程执行完成
    return 0;
}
///

std::mutex： 互斥量，用于保护共享资源。
///
#include <iostream>
#include <thread>
#include <mutex>

std::mutex myMutex;

void sharedResourceFunction() {
    std::lock_guard<std::mutex> lock(myMutex);
    // 操作共享资源的代码
}

int main() {
    std::thread t1(sharedResourceFunction);
    std::thread t2(sharedResourceFunction);

    t1.join();
    t2.join();

    return 0;
}
///

std::lock_guard： 线程安全的锁管理器，用于自动管理锁的获取和释放。
///
#include <iostream>
#include <thread>
#include <mutex>

std::mutex myMutex;

void sharedResourceFunction() {
    std::lock_guard<std::mutex> lock(myMutex);
    // 操作共享资源的代码
}

int main() {
    std::thread t1(sharedResourceFunction);
    std::thread t2(sharedResourceFunction);

    t1.join();
    t2.join();

    return 0;
}
///

std::condition_variable： 条件变量，用于线程之间的同步。
///
#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

std::mutex myMutex;
std::condition_variable myCV;

void waitForSignal() {
    std::unique_lock<std::mutex> lock(myMutex);
    myCV.wait(lock);  // 等待条件变量的信号
    // 执行一些操作
}

void sendSignal() {
    std::lock_guard<std::mutex> lock(myMutex);
    myCV.notify_one();  // 发送条件变量的信号
}

int main() {
    std::thread t1(waitForSignal);
    std::thread t2(sendSignal);

    t1.join();
    t2.join();

    return 0;
}
///

线程池： 通过线程池可以更有效地管理线程，避免频繁地创建和销毁线程。
///
#include <iostream>
#include <thread>
#include <vector>
#include <functional>
#include <future>

class ThreadPool {
public:
    ThreadPool(size_t numThreads) {
        for (size_t i = 0; i < numThreads; ++i) {
            threads.emplace_back([this] {
                while (true) {
                    std::function<void()> task;
                    {
                        std::unique_lock<std::mutex> lock(queueMutex);
                        condition.wait(lock, [this] { return stop || !tasks.empty(); });
                        if (stop && tasks.empty()) {
                            return;
                        }
                        task = std::move(tasks.front());
                        tasks.pop();
                    }
                    task();
                }
            });
        }
    }

    ~ThreadPool() {
        {
            std::unique_lock<std::mutex> lock(queueMutex);
            stop = true;
        }
        condition.notify_all();
        for (std::thread &thread : threads) {
            thread.join();
        }
    }

    template<class F, class... Args>
    auto enqueue(F &&f, Args &&... args) -> std::future<decltype(f(args...))> {
        using return_type = decltype(f(args...));
        auto task = std::make_shared<std::packaged_task<return_type()>>(
                std::bind(std::forward<F>(f), std::forward<Args>(args)...));
        std::future<return_type> res = task->get_future();
        {
            std::unique_lock<std::mutex> lock(queueMutex);
            if (stop) {
                throw std::runtime_error("enqueue on stopped ThreadPool");
            }
            tasks.emplace([task]() { (*task)(); });
        }
        condition.notify_one();
        return res;
    }

private:
    std::vector<std::thread> threads;
    std::queue<std::function<void()>> tasks;

    std::mutex queueMutex;
    std::condition_variable condition;
    bool stop = false;
};

int main() {
    ThreadPool pool(4);

    std::vector<std::future<int>> results;

    for (int i = 0; i < 8; ++i) {
        results.emplace_back(pool.enqueue([i] {
            std::this_thread::sleep_for(std::chrono::seconds(1));
            return i * i;
        }));
    }

    for (auto &result : results) {
        std::cout << result.get() << ' ';
    }

    return 0;
}
///
