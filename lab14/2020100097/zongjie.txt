线程：线程是进程中的执行单元，它包含指令指针、堆栈和局部变量等。一个进程可以包含多个线程，这些线程共享进程的资源（如内存）。
并发：并发是指多个任务或事件在同一时间间隔内发生。在多线程编程中，这意味着多个线程可以同时执行。
同步：同步是协调多个线程访问共享资源的过程，以防止数据不一致和其他并发问题。
互斥：互斥是一种同步机制，它确保在任何时候只有一个线程可以访问共享资源。

std::thread是一个类，用于创建和管理线程。
#include <iostream>  
#include <thread>   
void threadFunction() {  std::cout << "Hello from thread!\n";  }    
int main() {  
    std::thread t(threadFunction);  
    t.join(); 
    return 0;  }

std::mutex是一个互斥量类，用于保护共享资源免受多个线程的并发访问。当一个线程锁定一个互斥量时，其他尝试锁定该互斥量的线程将被阻塞，直到第一个线程释放该互斥量。
#include <iostream>  
#include <thread>  
#include <mutex>   
std::mutex mtx;
int shared_var = 0;  
void increment() {  mtx.lock(); ++shared_var;mtx.unlock(); }  
  int main() {  
    std::thread t1(increment); // 创建两个线程来修改共享变量  
    std::thread t2(increment);  
    t1.join(); // 等待线程完成  
    t2.join();  
    std::cout << "Shared variable: " << shared_var << '\n'; // 应输出2  
    return 0;  }


std::lock_guard是一个互斥量包装器，它在构造时锁定互斥量，并在析构时解锁。
#include <iostream>  
#include <thread>  
#include <mutex>  
std::mutex mtx;   
int shared_var = 0;   
void increment() {  
    std::lock_guard<std::mutex> lock(mtx);  
    ++shared_var;}  
  
std::condition_variable允许线程等待直到被另一个线程通知为止。它常常与互斥量一起使用，以保护共享数据的访问。

线程池：线程池是一种优化技术，用于减少在创建和销毁大量线程时的开销。它维护一组预先创建的线程，并将任务分配给这些线程进行处理。线程池适用于有大量短暂任务需要并发处理的情况。