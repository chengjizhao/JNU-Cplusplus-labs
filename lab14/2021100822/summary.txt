  线程的概念是指程序中的一个执行路径，它是进程的基本单元，一个进程可以包含多个线程。线程之间共享进程的资源，包括内存、文件、设备等。多线程的优点包括提高程序的执行效率、减少程序的响应时间，以及提高程序的可靠性。然而，多线程也会带来一些问题，如线程安全问题、死锁问题、线程通信问题等，因此在编写多线程程序时需要注意这些问题。
1. std::thread：
   std::thread是 C++11 标准库中的线程对象，用于创建和管理线程。它提供了构造函数来启动一个新线程，并可以传递函数或可调用对象作为参数。同时，它提供了 join() 函数来等待线程执行完毕，以及析构函数来自动销毁线程对象。
2. std::mutex：
   std::mutex 是 C++ 标准库中的互斥锁对象，用于保护共享数据，避免多个线程同时访问同一份数据而引发竞争条件和数据不一致的问题。std::mutex 提供了 lock()函数来加锁，unlock()函数来解锁，以及重入的特性。
3. std::lock_guard：
   std::lock_guard是一种 RAII（Resource Acquisition Is Initialization）包装器，用于管理互斥锁（std::mutex）的生命周期。当 std::lock_guard对象被创建时，它会自动获取互斥锁的锁定状态，并在对象的生命周期结束时自动释放锁。这样可以避免忘记解锁或重复解锁的问题。
4. std::condition_variable：
   std::condition_variable是 C++ 标准库中提供的一种条件变量，它可以帮助我们在多线程编程中实现线程间的条件等待和通知机制。当一个线程需要等待某个条件满足时，它可以调用 std::condition_variable 的 wait()函数来等待条件变量的通知。当其他线程满足条件后，可以调用 std::condition_variable的 notify_one()或 notify_all()函数来通知等待的线程。
5. 线程池：
   线程池是一种提高性能的机制，它创建一些线程组成一个线程池，然后将任务提交给线程池中的某个线程来执行。当任务完成后，线程并不会立即死亡，而是再次返回线程池中成为空闲状态，等待执行下一个任务。这样可以避免频繁地创建和销毁线程，减少系统开销。
