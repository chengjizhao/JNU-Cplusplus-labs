进程是程序执行的一个实例。它是系统进行资源分配和调度的基本单位，可以看作是一个程序的执行过程。
在一个进程的活动期间至少具备三种基本状态，即运行状态、就绪状态、阻塞状态。
  运行状态：该时刻进程占用 CPU；
  就绪状态：可运行，由于其他进程处于运行状态而暂时停止运行；
  阻塞状态：该进程正在等待某一事件发生（如等待输入/输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行；
进程还有另外两个基本状态：
  创建状态：进程正在被创建时的状态；
  结束状态：进程正在从系统中消失时的状态；
各个进程之间是共享 CPU 资源的，在不同的时候进程之间需要切换，让不同的进程可以在 CPU 执行。一个进程切换到另一个进程运行，称为进程的上下文切换。
进程上下文切换的常见场景：
  1. 为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，进程就从运行状态变为就绪状态，系统从就绪队列选择另外一个进程运行；
  2. 进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；
  3. 当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度；
  4. 当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；
  5. 发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序；

线程：线程是进程当中的一条执行流程。同一个进程内多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。
线程的优点：
  1.一个进程中可以同时存在多个线程；
  2.各个线程之间可以并发执行；
  3.各个线程之间可以共享地址空间和文件等资源。
线程的缺点：当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃。

std::thread是多线程支持的类，用于创建和管理线程。
使用std::thread创建和启动一个线程：
#include <iostream>
#include <thread>
void threadFunction() {
    std::cout << "Hello from thread!\n";
}
int main() {
    std::thread myThread(threadFunction);
    myThread.join(); 
    return 0;
}

std::mutex是互斥量，用于保护共享资源，防止多个线程同时访问。
std::lock_guard是互斥量的RAII封装，用于自动管理互斥量的锁定和解锁。
使用std::mutex和std::lock_guard：
#include <iostream>
#include <thread>
#include <mutex>
std::mutex myMutex;
void threadFunction() {
    std::lock_guard<std::mutex> lock(myMutex);
    std::cout << "Hello from thread!\n";
}
int main() {
    std::thread myThread(threadFunction);
    myThread.join();
    return 0;
}

std::condition_variable是条件变量，用于线程间的同步和通信。
使用std::condition_variable实现线程间的等待和通知：
#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
std::mutex myMutex;
std::condition_variable myCV;
bool ready = false;
void threadFunction() {
    std::unique_lock<std::mutex> lock(myMutex);
    myCV.wait(lock, [] { return ready; });
    std::cout << "Hello from thread!\n";
}
int main() {
    std::thread myThread(threadFunction);
    {
        std::lock_guard<std::mutex> lock(myMutex);
        ready = true;
    }
    myCV.notify_one();
    myThread.join();
    return 0;
}

线程池是一种用于管理和复用线程的机制，它可以在程序启动时创建一组线程，并在需要时将任务分配给这些线程执行。这有助于降低线程创建和销毁的开销，并提高程序的性能。
使用std::thread和std::mutex实现：
#include <iostream>
#include <vector>
#include <queue>
#include <thread>
#include <mutex>
#include <functional>
#include <condition_variable>
class ThreadPool {
public:
    ThreadPool(size_t numThreads) : stop(false) {
        for (size_t i = 0; i < numThreads; ++i) {
            workers.emplace_back([this] {
                while (true) {
                    std::function<void()> task;

                    {
                        std::unique_lock<std::mutex> lock(queueMutex);
                        condition.wait(lock, [this] { return stop || !tasks.empty(); });
                        if (stop && tasks.empty()) {
                            return;
                        }
                        task = std::move(tasks.front());
                        tasks.pop();
                    }
                    task();
                }
            });
        }
    }
    template <class F, class... Args>
    void enqueue(F&& f, Args&&... args) {
       {
        std::unique_lock<std::mutex> lock(queueMutex);
        tasks.emplace([&] { f(std::forward<Args>(args)...); });
       }
    condition.notify_one();
    }
    ~ThreadPool() {
        {
            std::unique_lock<std::mutex> lock(queueMutex);
            stop = true;
        }
        condition.notify_all();
        for (std::thread& worker : workers) {
            worker.join();
        }
    }
private:
    std::vector<std::thread> workers;
    std::queue<std::function<void()>> tasks;
    std::mutex queueMutex;
    std::condition_variable condition;
    bool stop;
};
void exampleTask(int id) {
    std::cout << "Task " << id << " executed by thread " << std::this_thread::get_id() << std::endl;
}
int main() {
    ThreadPool pool(4); 
    for (int i = 0; i < 8; ++i) {
        pool.enqueue(exampleTask, i);
    }
    return 0;
}