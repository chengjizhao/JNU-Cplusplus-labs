线程是程序执行流的最小单元。一个进程内可以有一个或多个线程。多线程可以提高程序的执行效率，特别是在多核CPU上。
线程池是在应用程序启动时创建的一组线程，它们在后台运行，并等待任务队列中的任务。当一个任务到来时，线程池中的一个空闲线程会获取任务并开始执行。这有助于减少线程创建和销毁的开销，并提高性能。C++标准库没有直接提供线程池，但有许多第三方库和框架提供了线程池的实现。
1、std::thread:
std::thread 是C++11中引入的线程类。
它可以创建、管理和链接线程。
示例：
#include <iostream>  
#include <thread>   
void print_hello() {  
    std::cout << "Hello from thread!\n";  
}  
int main() {  
    std::thread t(print_hello);  
    t.join();  
    return 0;  
}
2、std::mutex:
互斥锁，用于保护共享资源，确保同一时间只有一个线程可以访问。
示例：
#include <iostream>  
#include <thread>  
#include <mutex>  
std::mutex mtx;  
void print_hello() {  
    std::lock_guard<std::mutex> lock(mtx);  
    std::cout << "Hello from thread!\n";  
}  
int main() {  
    std::thread t1(print_hello);  
    std::thread t2(print_hello);  
    t1.join();  
    t2.join();  
    return 0;  
}
3、std::lock_guard：
是一种RAII(Resource Acquisition Is Initialization)风格的锁类型。当它构造时，它尝试获取锁，并在析构时释放锁。这确保了即使在异常或早期返回时，锁也会被正确释放。
4、std::condition_variable:
条件变量，用于在一定条件满足时唤醒等待的线程。常常与std::unique_lock和std::mutex一起使用。