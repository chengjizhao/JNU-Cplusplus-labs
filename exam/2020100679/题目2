1.虚数表概念
虚函数表（vtable）是一个存储了该类的虚函数地址的表，每个包含虚函数的类都有一个对应的虚函数表。
虚函数表使得在运行时能够动态地选择调用哪个函数，实现了多态性。派生类重写基类的虚函数时，会在虚函数表中覆盖相应的函数指针。
虚函数表通常位于类的内存布局的最开始的位置。
2.编译器如何为每个包含虚函数的类生成该表
编译器为每个包含虚函数的类生成一个虚函数表，并在类的内存布局中插入指向该表的指针。
在生成虚函数表时，对于每个虚函数，编译器会生成一个指向对应函数的函数指针，并将这些函数指针依次存储在虚函数表中。
3.如何修改一个类并通过实例访问虚函数表中的内容
通过正常方法无法直接访问虚函数表，因为它通常是隐藏起来的。
可以通过指针操作来访问虚函数表的内容，通过程序中的实例指针，将其转换成不同类型的指针来访问不同类的虚函数表的内容。
4. 继承中虚函数表的工作原理和派生类如何与基类共享虚函数表
派生类和基类都有自己的虚函数表，派生类的虚函数表会在基类的虚函数表的基础上扩展，新增的函数会覆盖基类相应位置的函数指针，如需要。
当一个派生类对象通过基类指针调用其虚函数时，会根据对象的实际类型找到对应的虚函数表，实现了多态性的效果。
如果基类和派生类的虚函数表结构完全相同，编译器可能会共享虚函数表。
