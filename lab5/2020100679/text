在上述示例中，我们定义了一个名为 `Person` 的类，具有公共成员 `name` 和私有成员 `ID`、`DOB`、`gender`、`height` 和 `weight`。类中的函数用于查询和设置这些属性。 在主程序中，我们使用不同的构造函数创建了三个 `Person` 对象：`p1` 使用默认构造函数，`p2` 使用带名字的构造函数，`p3` 使用完整构造函数。然后，我们使用 `sizeof()` 运算符打印每个对象所占用的存储空间大小。 对象的尺寸是由其成员变量的类型和对齐方式决定的。在常见的情况下一个 `Person` 对象的尺寸将包括 `std::string` 类型的 `name` 成员以及其他几个类型的成员变量。此外，由于编译器可能会进行内存对齐，对象的实际尺寸可能会略大于成员变量的总和。每个平台和编译器都可能有不同的内存对齐规则，因此实际的对象尺寸可能会有所差异。 请注意，由于编译器的优化和填充规则，实际的对象尺寸可能与预期的不完全一致。要获得准确的对象尺寸，可以使用 `sizeof` 运算符进行测量。
