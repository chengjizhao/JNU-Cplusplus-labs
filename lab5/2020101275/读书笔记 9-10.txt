第九章：介绍了单独编译，储存持续性、作用域和链接性和名称空间
C++允许甚至鼓励程序员将组件函数放在独立的文件中。如果只修改了一个文件，则可以只重新编译该文件，然后将它与其他文件的编译版本链接，这使得大程序的管理更便捷。
使用#include时，若文件名包含在尖括号<>中，则C++编译器将在存储标准头文件的主机系统的文件系统中查找；若文件名包含在双引号""中，则编译器将首先查找当前的工作目录或源代码目录（或其他目录，这取决于编译器），在未找到头文件时再去标准位置查找。因此在包含自己的头文件时应使用双引号而非尖括号。
 要修改结构声明时，只需在头文件中做一次改动即可。另外，也可以将函数原型放在头文件中。因此，可以将原来的程序分成三部分。头文件:包含结构声明和使用这些结构的函数的原型。源代码文件:包含与结构有关的函数的代码源代码文件:包含调用与结构相关的函数的代码。
  动态内存分配和释放是使用 new 和 delete 进行的，它使用自由存储区或堆来存储数据。调用new 占用内存，而调用 delete 释放内存。程序使用指针来跟踪这些内存单元。

第十章：
  本章包括过程性编程和面向对象编程、抽象和类、类的构造函数和析构函数、this指针、对象数组、类作用域和抽象数据类型几部分内容。
一般来说，类规范由两个部分组成：
类声明：以数据成员方式描述数据部分，以成员函数（方法）的方式描述公有接口
类方法定义：描述如何实现类的成员函数。
C++对结构进行了扩展，使之具有了与类相同的特性。它们之间唯一的区别在于，结构的默认访问类型为public，而类为private。
  定义位于类声明中的函数都将自动成为内联函数，类声明常将短小的成员函数作为内联函数。
也可以在类声明之外显式地定义成员函数为内联函数，只需要在定义函数时使用inline限定符即可。此时需注意内联函数的特殊规则要求在每个使用该函数的文件中都对其进行定义，而将内联定义放在定义类的头文件中，是确保内联定义在多文件程序中的所有文件中都可用的最简便方式。
根据改写规则（rewrite rule），在类声明中定义方法等同于用原型替换方法定义，然后在类声明的后面将定义改写为内联函数。