第九章
1单独编译：将一个程序分为三个程序，头文件（结构声明、函数原型），源文件1（函数定义），源文件2（调用函数的代码）
头文件可以有函数原型、符号常量、类声明、模板声明等，不能有函数定义和变量声明
在源文件中使用头文件要用“”来引用，优先在工作目录或源代码目录查找，<>是在主机系统查找
多个cpp编译，输入UNIX命令CC 源代码1.cpp 源代码2.cpp
2存储
根据时间不同分为自动、静态、线程、动态变量
       自动变量，一般变量默认为，局部变量，无链接性，局部变量特性同名隐藏全局变量。关键字auto仅指出作用。内存是栈的形式，两个指针指向堆顶和栈底，数据进出为后进先出。register关键字仅区分外部变量。
       静态变量，外链接性/内/无，后两者要有static，有固定内存块（执行与否）。初始化为零，初始值为零/常量表达式，简单计算和sizeof/动态，函数要等编译后。
外部变量，根据单定义规则只一次定义，其他声明。变量声明有定义初始和引用声明（extern），全局版本    ：：变量
内部变量，static可以不同文件同名变量独立
无链接性，一段代码。static，不用再次初始化
       说明符新增thread-loca，l表示线程变量，mutable可以修改const结构内某个成员。限定符const，初始化后不修改类似static，要变成外部变量extern const 变量，volatile表示变量不修改也可能变化。
       动态变量new（c的malloc），分配内存空间给变量，delete配对结束。初始化，类型指针=new类型初始值，初始化结构或数组后面再加{数据}。new/new[]运算符用来调用函数。
3名称空间
传统术语：声明区域和潜在作用域
新增声明区域创建命名空间，有外部链接性、不能在代码中，：：可以用来限定
using声明标识符全局或局部变量/编译名称空间
using声明不能同时使用两个，同名有全局变量和JILL::fetch再声明局部变量会错，在主函数声明中命名空间变量已经代替局部变量
using编译同名有全局变量和局部变量再声明JILL::fetch，局部变量隐藏全局变量，隐藏命名空间变量
可以嵌套、未命名创建