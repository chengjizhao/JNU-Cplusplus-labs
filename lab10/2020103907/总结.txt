第九章：
本章包括单独编译，储存持续性、作用域和链接性和名称空间三部分的内容。C++鼓励程序员在开发程序时使用多个文件。一种有效的组织策略是，使用头文件来定义用户类型，为操纵用户类型的函数提供函数原型:并将函数定义放在一个独立的源代码文件中。头文件和源代码文件-起定义和实现了用户定义的类型及其使用方式。最后，将 main()和其他使用这些函数的函数放在第三个件中。
要修改结构声明时，只需在头文件中做一次改动即可。另外，也可以将函数原型放在头文件中。因此，可以将原来的程序分成三部分。头文件:包含结构声明和使用这些结构的函数的原型。源代码文件:包含与结构有关的函数的代码源代码文件:包含调用与结构相关的函数的代码
C++的存储方案决定了变量保在内存中的时间(储存持续性)以及程序的哪一部分可以访问它(作用域和链接性)。自动变量是在代码块(如函数体或函数体中的代码块)中定义的变量，仅当程序执行到包含定义的代码块时，它们才存在，并且可见。自动变量可以通过使用存储类型说明符register或根本不使用说明符来声明，没有使用说明符时，变量将默认为自动的。register说明符提示编译器，该变量的使用频率很高。
动态内存分配和释放是使用 new 和 delete 进行的，它使用自由存储区或堆来存储数据。调用new 占用内存，而调用 delete 释放内存。程序使用指针来跟踪这些内存单元。
名称空间允许定义一个可在其中声明标识符的命名区域。这样做的目的是减少名称冲突，尤其当程序非常大，并使用多个厂商的代码时。可以通过使用作用域解析运算符、using 声明或 using 编译指令，来使名称空间中的标识符可用。

第十章：
本章包括过程性编程和面向对象编程、抽象和类、类的构造函数和析构函数、this指针、对象数组、类作用域和抽象数据类型几部分内容。
面向对象编程强调的是程序如何表示数据。使用OOP方法解决编程问题的第一步是根据它与程序之间的接口来描述数据，从而指定如何使用数据。然后，设计一个类来实现该接口。一般来说，私有数据成员存储信息，公有成员函数(又称为方法)提供访问数据的唯一途径。类将数据和方法组合成一个单元，其私有性实现数据隐藏。
通常将类分明分成两部分组成，这两部分通常保存在不同的文件中。类声明（包括由函数原型表示的方法）应放到头文件中。定义成员函数的源代码放在方法文件中，这样便于将接口描述与实现细节分开。
类是用户定义的类型，对象是类的实例。这意味着对象是这种类型的变量，例如new按类描述分配的内存。C++试图让用户定义的类型尽可能与标准类型类似，因此可以声明对象、指向对象的指针和对象数组。可以按值传递对象、将对象作为函数返回值、将一个对象赋给同类型的另一个对象。如果提供了构造函数，则在创建对象时，可以初始化对象。如果提供了析构函数方法，则在对象消亡后，程序将执行该函数。
如果希望成员函数对多个对象进行操作，可以将额外的对象作为参数传递给它。如果方法需要显式地引用调用它的对象，则可以使用 this 指针。由于 this 指针被设置为调用对象的地址，因此*this 是该对象的别名。
类很适合用于描述 ADT。公有成员函数接口提供了ADT 描述的服务，类的私有部分和类方法的代码提供了实现，这些实现对类的客户隐藏。