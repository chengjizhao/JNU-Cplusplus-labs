第九章

1、C++允许将组件函数放在独立的文件中。如果只修改了一个文件，则可以只重新编译该文件，然后将它与其他文件的编译版本链接

2、使用#include时，若文件名包含在尖括号<>中，则C++编译器将在存储标准头文件的主机系统的文件系统中查找；若文件名包含在双引号""中，则编译器将首先查找当前的工作目录或源代码目录（或其他目录，这取决于编译器），在未找到头文件时再去标准位置查找。因此在包含自己的头文件时应使用双引号而非尖括号。
头文件由#include指令管理，不需要编译。也不要使用#include包含源代码文件，这会导致多重定义。

3、UNIX系统中编译由多个文件组成的C++程序：
（1）预处理器将#include包含的文件与源代码文件合并；
（2）编译器创建每个源代码文件的目标代码文件（.o后缀文件）；
（3）链接程序将目标代码文件、库代码和启动代码合并，生成可执行文件。
C++编译流程有四步
（1）预处理：处理一些#定义的预处理编译指令，生成.i文件；
（2）编译：进行词法分析、语法分析、语义分析等，生成.s汇编文件；
（3）汇编：将对应的汇编指令翻译成机器指令，生成二进制.o目标文件
（4）链接：分为静态链接和动态链接。静态链接的外部函数在编译时重定位，而动态链接在运行时重定位。

4、C++11中有四种不同的方案来存储数据，
（1）自动存储持续性：在函数定义中声明的变量（包括函数的参数）的存储持续性为自动的。它们在程序开始执行其所属的代码块时被创建，在执行完函数或代码块时，它们使用的内存被释放。
（2）静态存储持续性：在函数定义外定义的变量和使用关键字static定义的变量的存储持续性都为静态。它们在程序整个运行过程中都存在。
（3）线程存储持续性：如果变量是使用关键字thread_local声明的，则其生命周期与所属的线程一样长。
（4）动态存储持续性：用new运算符分配的内存将一直存在，直到使用delete运算符将其释放或程序结束为止。这种内存的存储持续性为动态，有时也被称为自由存储（free store）或堆（heap）。

5、作用域（scope）描述了名称在文件的多大范围内可见。链接性（linkage）描述了名称如何在不同单元间共享。链接性为外部的名称可在文件之间共享，链接性为内部的名称只能由一个文件中的函数共享。自动变量的名称没有链接性，因为它们不能共享。

作用域为局部的变量只在定义它的代码块中可用。作用域为全局（也称文件作用域）的变量在定义位置到文件结尾之间都可用。自动变量的作用域为局部，静态变量的作用域是全局还是局部取决于它是如何被定义的。在类中声明的成员的作用域为整个类。在名称空间中声明的变量的作用域为整个名称空间（全局作用域实际上是名称空间作用域的特例）。

第十章

1、类规范由两个部分组成：
类声明：以数据成员方式描述数据部分，以成员函数（方法）的方式描述公有接口；
类方法定义：描述如何实现类的成员函数。

2、接口是一个共享框架，供两个系统交互时使用。对于类，我们常说一个概念叫公共接口。此处的公共是使用类的程序，交互系统由类对象组成，而接口由编写类的程序员提供的方法组成。接口让程序员能够编写类对象交互的代码，从而让程序能够使用类对象。
公有成员函数是程序和对象的私有成员之间的桥梁，提供了对象和程序之间的接口。防止程序直接访问数据被称为数据隐藏。数据隐藏不仅可以防止直接访问数据，还让类的用户无需了解数据是如何被表示的。

3、类设计尽可能将公有接口与实现细节分开，公有接口表示设计的抽象组件。将实现细节放在一起并将它们与抽象分开被称为封装。数据隐藏是一种封装，将实现的细节隐藏在私有部分中也是一种封装。以及，将类函数定义和类声明放在不同的文件中，也属于封装。

4、定义成员函数时，需要使用作用域解析运算符（::）来标识函数所属的类；
