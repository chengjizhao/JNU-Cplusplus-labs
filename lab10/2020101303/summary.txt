第九章 内存模型和命名空间
C++允许将组件函数放在独立的文件中，可以通过单独编译这些文件，然后将它们链接成可执行的程序。这中方式使大程序的管理更便捷。
一个比较复杂的可执行程序（一个.cpp）可以分成三部分：
    头文件：包括结构声明和使用这些结构的函数原型。一般包含函数原型、使用#define或const定义的符号常量、结构声明、模板声明以及内联函数（一般函数的定义不能在头文件定义，否则会出错）。通常用#ifndef、#define、…、#endif 进行预处理，让其忽略除第一次包含之外的所有内容。
    源代码文件：包含与结构有关的函数的代码，可以完成某些任务，可能不止一个。
    源代码文件：包含调用与结构相关的函数的代码，通常为main()。
在UNIX系统中编译由多个文件组成的C++程序的过程为：1、预处理器将包含的文件（系统的+自己定义的.h文件）与源代码文件合并；2、编译器创建每个源代码文件的目标代码文件；3、链接程序将目标代码文件、库代码和启动代码合并，生成可执行文件(a.out)。
C++使用四种不同的方案来存储数据，这些方案的区别在于数据保留在内存中的时间。
    自动存储持续性：在函数定义中声明的变量（包括函数参数）的持续性为自动的。调用时创建，执行完后释放。
    静态存储持续性：在函数定义外定义的变量和使用关键字static定义的存储持续性为静态。在整个运行过程中都存在。
    动态存储持续性：用new运算符分配的内存将一直存在，直到使用delete运算符将其释放或程序结束为止。这种内存的存储持续性为动态，是可控的。
    线程存储持续性：让程序能过将计算放在可并行处理的不同线程中。
作用域描述了名称在文件的多大范围可见，作用域为局部的变量旨在定义它的代码块中可用，作用域为全局的变量在定义位置到文件结尾间都可用。链接性描述了名称如何在不同单元间共享，链接性为外部的名称可在文件间共享，链接性为内部的名称只能由一个文件中的函数共享。C++函数的作用域可以是整个类或整个名称空间。
自动变量（在默认情况下，在函数中声明的函数参数和变量）的作用域为局部，没有链接性。
全局变量/外部变量的作用域为整个文件，链接性为外部。
将static限定符用于作用域为整个文件的变量时，该变量的链接性为内部的。将static限定符用于在代码块中定义的变量为无链接性的局部变量。
关键字volatile表明，即使程序代码没有对内存单元进行修改，其值也可能发生变化。作用是为了改善编译器的优化能力，告诉编译器从对应的真实的端口地址读取实时变化的数值，不要进行优化。
mutable可以用于指出即使结构或类变量为const，某个成员也可以被修改。
const全局变量的链接性为内部的，即在C++看来，全局const定义就像使用了static说明符一样。
所有函数的存储持续性都自动为静态的，即在整个程序执行期间都一直存在。在默认情况下，函数的链接性为外部，即可以在文件间共享。
动态内存分配和释放是使用new和delete进行的，它使用自由存储区或堆来存储数据。调用new占用内存，而调用delete释放内存。程序使用指针来跟踪这些内存单元。
作用域解析运算符::可以用来限定名称，实现访问给定空间中的名称。
using声明使特定的标识符可用，using编译指令使整个名称空间可用。这两种机制都能简化对名称空间中名称的使用。编译器不允许同时使用会导致二义性的两个using声明。using编译指令与使用多个using声明是不一样的，using声明可能会因导入相同的名称而造成冲突，而using编译指令则会因隐藏而不会形成这样的冲突。
第十章 对象和类
类：将数据表示和操纵数据的方法组合成一个整洁的包。（数据部分+对数据类型的操作）
类声明：以数据成员的方式描述数据部分，以成员函数（被称为方法）的方式描述公有接口。（要用到的变量+有关类的成员函数）
类方法定义：描述如何实现类成员函数。
类的定义/声明(class)放在头文件中，将类方法的代码放在源代码文件中。
关键字private和public描述了对类成员的访问控制。在private里面出现的函数、标识或变量只有通过public的公用成员才能访问到。用private可实现数据的隐藏，可防止使用者修改里面的数据。
数据项部分一般放在私有部分（可以有部分只有在私有部分调用的简单函数），组成类接口的成员函数放在公有部分，否则就无法从程序中调用这些函数。
类包括数据和函数，传统的结构体通常只包括数据（当然也有函数，只是结构体的数据和函数都是public的）。
类的成员函数定义与常规函数定义非常相似，它们有函数头和函数体，也可以有返回类型和参数。但成员函数还有两个特征：定义成员函数时，使用作用域解析运算符(::)来标识函数所属的类（某一的成员函数使用同一类的其他成员函数时不必使用作用域解析运算符）；类方法可以访问类的private组件。
内联函数：定义位于类声明中的函数（比较简短）。也可以在类声明之外定义成员函数并使其称为内联函数，只需要在类实现部分中定义函数时使用inline限定符。
类构造函数专门用于构造新对象，将值赋给它们的数据成员（用于初始化）。构造函数的名称和类同名，没有返回值，也不用声明为void类型。构造函数的参数表示的不是类成员，而是赋给类成员的值，所以参数名不能与类成员相同（可用在数据成员名称中使用前缀m_或后缀_）。
显式调用构造函数：类名称 类对象名 = 构造函数名（对应值1，对应值2，……）；
隐式调用构造函数：类名称 类对象名（对应值1，对应值2，……）。
默认构造函数是在未提供显式初始值时，用来创建对象的构造函数。它不做任何工作。
定义默认构造函数的方式有两种：一种是给已有构造函数的所有参数提供默认值，另一种是通过函数重载来定义另一个没有参数的构造函数。这两种方式不能同时采用。
析构函数用于清理过期的构造函数创建对象。析构函数的名称是在类名前面加上~。没有返回值、声明类型和参数。析构函数通常会自动被编译器调用。
const关键字在声明时放在函数的括号后面，定义时也是将const放在括号后面。这种形式的类函数被称为const成员函数。只要类方法不修改调用对象，就应该将其声明为const。
构造函数可有多个（参数不同即可），而析构函数只有一个。