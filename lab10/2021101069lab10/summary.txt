《c++ primer plus》
第九章内存空间和名称空间
内存模型
在C++中，程序使用的内存可以分为几个不同的部分，包括堆区、栈区、全局/静态存储区和代码区。每个部分的内存都有不同的使用方式和特点。
1.栈区：存放函数的参数值、局部变量等。当函数执行完成后，这些数据会被销毁。
2.堆区：用于动态内存分配。通过malloc、calloc或new等函数分配的内存都来自堆区，使用完毕后需要手动释放，否则可能导致内存泄漏。
3。全局/静态存储区：存放全局变量和静态变量。这些数据在整个程序运行期间都会存在。
4.代码区：存放程序代码。这部分区域的内容通常不会在程序执行期间发生改变。
了解内存模型对于编写高效的C++程序非常重要，尤其是对于内存的合理使用和管理。
名称空间
名称空间是一种封装和隔离的机制，用于避免名称冲突和提高代码的可读性和可维护性。在C++中，可以使用“::”操作符来指定名称空间。
第十章对象和类
对象是类的实例，类是对象的蓝图或模板。
类具有以下特性：
1.封装：类能够封装数据和操作。通过在类内部定义变量和函数，我们可以实现数据和操作的封装。
2.继承：类可以从其他类继承属性和行为。这是一种实现代码重用和扩展的机制。
3.多态：类可以定义多种形态。这是面向对象编程中的一个重要特性，可以实现不同类型对象间的交互和扩展。
在定义类时，要考虑类的属性和行为。属性通常对应类的数据成员，而行为则对应类的成员函数。
类的成员访问修饰符有三种：公有(public)、保护(protected)和私有(private)。默认情况下，成员的访问修饰符为私有。只有类的成员函数可以访问类的私有成员，而类的友元函数或友元类可以访问公有成员。
构造函数用于初始化类的对象。每个类都有一组构造函数，可以根据参数的数量和类型进行重载。析构函数用于释放类对象的资源。
静态成员属于类，而不是对象，常成员则需要使用const关键字进行声明。
使用类可以更好地组织和管理代码，提高代码的可重用性和可维护性。在编程过程中，应尽量将相关的数据和操作封装在一个类中，并通过合适的访问修饰符控制类的成员访问权限，从而实现更安全、更灵活的代码设计。