第九章
单独编译（和C语言一样，C++也允许甚至鼓励程序员将组件函数放在独立的文件中，请
不要将函数定义或变量声明放到头文件中。这样做对于简单的情况可能是可行的，但通
常会引来麻烦。）
存储持续性、作用域和链接性。（存储类别分为四类：
自动存储持续性:在函数定义中声明的变量(包括函数参数的存储持续性为自动的。它们
在程序开始执行其所属的函数或代码块时被创建，在执行完函数或代码块时，它们使用的内存被释放。C++有两种存储持续
性为自动的变量。
静态存储持续性:在函数定义外定义的变量和使用关键字 static 定义的变量的存储持续
性都为静态。它们在程序整个运行过程中都存在。
线程存储持续性(C++11):多核处理器很常见，这些 CPU 可同时处理多个执行。这让程
序能够将计算放在可并行处理的不同线程中。如果变量是使用关键字 thread local 声
明的则其生命周期与所属的线程一样长。本书不探讨并行编程。
动态存储持续性:用new 运算符分配的内存将一直存在，直到使用 delete 运算符将其释放或程序
结束为止。这种内存的存储持续性为动态，有时被称为自由存储 (free store)或堆(he
ap)）
定位(placement)new运算符。（在同一个声明中不能使用多个说明符，但 hread lcal
 除外，它可与static 或extem 结合使用。可以在声明中使用关键字 auto 指出变量为
 自动变量;但在 C++11中，auto 用于自动类型推断。关键字 register 用于在声明中
 指示寄存器存储，而在 C+11 中，它只是显式地指出变量是自动的。关键字 static
 被用在作用域为整个文件的声明中时，表示内部链接性;被用于局部声明中，表示局
 部变量的存储持续性为静态的。关键字 extemn 表明是引用声明，即声明引用在其他
 地方定义的变量。关键字thread local 指出变量的持续性与其所属线程的持续性相
 同。thread local 变量之于线程犹如常规静态变量之于整个程序。关键字mutable 
 的含义将根据 const 来解释）。
 名称空间。（名称空间可以是全局的，也可以位于另一个名称空间中，但不能位于代码
 块中。因此，在默认情况下,在名称空间中声明的名称的链接性为外部的(除非它引用了
 常量)。除了用户定义的名称空间外，还存在另一个名称空间-全局名称空间 (global 
 namespace)。它对应于文件级声明区域，因此前面所说的全局变量现在被描述为位于
 全局名称空间中。任何名称空间中的名称都不会与其他名称空间中的名称发生冲突。因
 此，Jack 中的 fetch 可以与Jil中的 fetch 共存，Jill 中的 Hi 可以与外部 H 共
 存。名称空间中的声明和定义规则同全局声明和定义规则相同。)

 第十章
 本张主要介绍了过程性编程和面向对象编程。类概念。如何定义和实现类（类声明:以
 数据成员的方式描述数据部分，以成员函数(被称为方法)的方式描述公有接口类方法定
 义:描述如何实现类成员函数。简单地说，类声明提供了类的蓝图，而方法定义则提供
 了细节。）。
 公有类访问和私有类访问。类的数据成员。类方法(类函数成员 )。创建和使用类对象。
 类的构造函数和析构函数。const成员函数。
 this 指针。（如果希望成员函数对多个对象进行操作，可以将额外的对象作为参数传
 递给它。如果方法需要显式地引用调用它的对象，则可以使用 this 指针。由于 this 
 指针被设置为调用对象的地址，因此*this 是该对象的别名。）创建对象数组。类作用
 域。抽象数据类型。
