第一章回顾计算机的软硬件基本结构，包括CPU和外网部件的连接方式、SMP与多核、软硬件层次体系结构、如果充分利用CPU及与系统软件十分相关的设备驱动，操作系统、虚拟空间、物理空间、页映射和线程的基础概念。

系统软件：一般用于管理计算机本书的软件，称为系统软件，以区别普通的应用程序。
系统软件分为两块：1）平台性的，如OS内核、驱动程序、运行库和系统工具；2）用于程序开发的，如编译器、汇编器、链接器等开发工具和开发库。

OS的作用
1）提供抽象的接口；2）管理硬件资源。
一个计算机主要硬件资源：CPU、存储器（内存和硬盘）、I/O设备。

设备驱动
提供统一接口，统一硬件访问模式，屏蔽硬件细节。如open、read/write、close，既可以读写文件（操作硬盘），也可以与终端设备、网络设备交互。

内存不够怎么办
1.地址空间不隔离
所有程序直接访问物理地址，恶意程序很容易改写其他程序的内存数据，影响其他任务，从而导致整个计算机环境不安全。
2.内存使用率低
缺乏有效内存管理机制，程序执行时，整个程序装入内存执行；然而，内存不足时，就需要换出整个程序，空出内存给其他进程使用。
3.程序运行的地址不确定
因为程序每次装入运行时，需要分配一块足够大的内存区域，其位置不确定。给编程造成了麻烦，因为编程时，访问数据和指令跳转的目标地址很多是固定的，就涉及到程序的重定位问题。
解决思路：增加中间层，提供间接的地址访问方法。把程序给出的地址看作是虚拟地址（Virtual Address），然后通过映射的方法，将虚拟地址转化成实际的物理地址。这样做的好处：程序能访问的物理内存区域相互隔离。

关于隔离
32bit的虚拟地址空间，可以看成是0~2^32 byte，大小是4GB。
地址空间分两种：虚拟地址空间（Virtual Address Space），物理地址空间（Physical Address Space）。
每个进程只能访问自己的地址空间，只有真正装了内存的部分（往往 << 4GB），才是真实有效的，对应实际的物理地址。

分段（Segmentation）
分段基本思路：把一段与程序所需要的内存空间大小的虚拟空间，映射到某个地址空间。
简而言之，就是把虚拟空间按地址范围划分多个段，分别用作不同用途。
注：分段做到了地址隔离，但没有解决内存使用效率的问题。因为分段对内存区域的映射还是按程序为单位，如果内存不足，被换入换出到磁盘的都是整个程序，会造成大量磁盘IO，严重影响速度。
根据程序的局部性原理，想到了分页（Paging）的方法，以提高内存的使用率。

分页（Paging）
虚拟页，物理页与磁盘页
把地址空间人为地等分成固定大小的页，每一页的大小由硬件决定。或者硬件提供多个选项，OS决定具体选择。
把进程的虚拟地址空间按页分割，常用的数据和代码装载到内存中，不常用的放到磁盘中。当需要用到时，再从磁盘取出。
虚拟空间的页叫虚拟页（VP, Virtual Page），物理内存的页叫物理页（PP, Physical Page），磁盘中的页叫磁盘页（DP, Disk Page）。
虚拟空间有些页被映射到同一个物理页，这样就可以实现内存共享。

线程基础
线程有时被称为轻量级进程（Lightweight Process, LWP），是程序执行的最小单元。一个标准的线程由线程ID、当前指令指针（PC）、寄存器集合和堆栈组成。
通常，一个进程由一个到多个线程组成，各个线程之间共享程序的内存空间（代码段、数据段、堆等）及一些进程级的资源（已打开的文件描述符等）。

多线程的优势
某个操作可能会陷入长期等待，等待的线程进入休眠，无法继续执行。多线程可以有效利用等待的时间，其他线程可以正常工作。
某个操作（常常是计算）会消耗大量时间，如果只有一个线程，程序和用户之间交互会中断。多线程可以让一个线程负责交互，另一个负责计算。
程序逻辑本身要求并发，如多端下载软件（迅雷、bittorrent）。
多CPU或多核计算机，本身具备同时执行多个线程的能力，单线程无法发挥计算机的全部算力。
相对于多进程，多线程在数据共享方面效率高很多。

线程的访问权限
线程的访问非常自由，可以访问内存所有数据，包括其他线程的堆栈（前提是知道地址）。
线程的私有存储空间包括：
1.栈（无法完全被其他线程访问，但通常可认为是私有的）；
2.线程局部变量（Thread Local Storyage, TLS）。线程局部存储是某些OS为线程单独提供的私有空间，通常容量有限；
3.寄存器（PC等），是执行流的基本数据；

线程之间共享的存储空间包括：
1.全局变量；
2.堆数据；
3.函数里的静态变量；
4.程序代码；
5.打开的文件，A线程打开的文件，B线程可以读写；

线程调度与优先级
线程数量 <= 处理器数量时，线程并发是真正的并发，不同线程互不相干；
线程数量 > 处理器数量时，线程并发受到阻碍，因为至少有一个处理器运行多个线程；
一个处理器上切换不同线程的行为，称为线程调度（Thread Schedule），线程至少有3种状态：
运行（Running）：线程正在执行；
就绪（Ready）：线程可以立刻运行，但CPU已经被占用；
等待（Waiting）：线程正在等待某一事件（IO或同步）发生，无法执行；
时间片（Time Slice）：
线程拥有一段可以执行的时间，称为时间片。

第六章
1. 从操作系统角度看可执行文件的装载
1.1 进程建立的三个步骤
从操作系统角度看，一个进程最关键的特征就是它拥有独立的虚拟地址空间。这使得它有别于其他进程。
但是一个进程的建立需要三个步骤

1.1.1 创建一个独立的虚拟地址空间
虚拟地址空间由一组页映射函数将虚拟空间的各个页映射到相应的物理地址。
创建虚拟地址空间的本质是：创建映射函数需要的数据结构。

1.1.2 建立虚拟空间和可执行文件的映射关系
其实这个关系就是：发生页错误时，OS应该知道程序当前需要的页在可执行文件中的哪一个位置。

映像文件（Image）：
因为可执行文件在被装载时是被映射到虚拟地址空间的，所以很多时候可执行文件又被叫做映像文件。
这种映射关系也是保存在OS中的一个数据结构中的。

虚拟内存区域（VMA: Virtual Memory Area）：
linux将进程虚拟空间中的一个段叫做虚拟内存区域。windows叫做虚拟段。

1.1.3 将cpu的指令寄存器设置为可执行文件的入口地址，执行它
可执行文件的入口地址就是elf的入口地址
Entry point address就是入口地址

1.2 为什么需要虚拟地址空间？
因为早期的计算机运行方式是直接将程序运行在物理内存上。这就存在三个问题：
问题1. 地址空间不隔离
所有进程都直接访问物理地址，程序使用的物理空间不是隔离的；
问题2. 运行效率低
监控程序直接将整个程序装入内存进行执行
问题3. 运行地址不确定
因为每次执行装入的物理地址是不确定的。

为了解决以上三个问题，增加了一个中间层，用来解决上面的问题。
那就是给出一个虚拟地址，然后通过一种映射关系，将其与物理地址进行映射，将虚拟地址转换成物理地址。
这样就能解决存在的问题1和问题3，问题2需要页映射来解决。

1.3 页错误
1.3.1 页错误定义
当cpu执行进程的某个页面时，发现这个虚拟空间中的页没有映射到内存中，而导致的中断。

1.3.2 页错误的处理
1.页错误发生后，操作系统去查询保存可执行文件和其进程虚拟空间映射关系的数据结构
2.找到空页面所在的VMA虚拟内存区域。然后通过它VMA计算出空页面在可执行文件中偏移
3.然后再物理内存中分配一个物理页面，并将该物理页和虚拟空间中虚拟页建立映射关系。
4.最后将cpu控制权返还给进程，从刚才页错误的地方继续执行。
