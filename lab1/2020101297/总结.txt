第一章、温故而知新
1.计算机核心：中央处理器CPU、内存、I/O控制芯片
2.随着CPU速度提高，内存速度跟不上CPU速度，产生了与内存频率一致的系统总线，而CPU采用倍频的方式与系统总线进行通信。
3.当CPU速度无法提升后，人们开始采用提高CPU的数量来提升速度。理论上讲，增加CPU的数量就可以提高运算速度，并且理想情况下，
速度的提高与CPU的数量成正比。但实际上并非如此，因为我们的程序并不是都能分解成若干个完全不相干的子问题。
4.多处理器应用最多的场合是商用的服务器和需要处理大量计算的环境。在个人电脑中，使用多处理器则是比较奢侈的行为，
毕竟多处理器的成本是很高的。于是处理器的厂商开始推出多核处理器（Multi-core Processor）。多核处理器实际上就是SMP的简化版。
5.系统软件分为两块，一块是平台性的，如操作系统内核、驱动程序、运行库等，另一块是用于程序开发的，如编译器、汇编器、链接器等。
6.计算机系统软件体系采用一种一种层的结构，分为硬件层、操作系统内核、运行库、应用层与开发工具。层与层之间通过接口进行通信。
7.让计算机运行得更有效率：1、利用多任务系统模式，抢占式的CPU分配方式  
                                             2、将硬件抽象化，形成统一的硬件访问模式，硬件细节由硬件驱动程序完成
8.硬盘基本储存单位为扇区，每个扇区一般为512字节
9.简单的给每个程序分配一定的物理内存会导致：1、地址空间不隔离；2、内存使用效率低；3、程序运行的地址不确定
  解决的方法；增加中间层，将程序给出的地址看作为一种虚拟地址，通过隐射关系与实际地址联系起来，并且保证达到地址空间隔离的效果
10.分段的方法解决了问题1和3，但是效率问题没有得到解决；
     分页用更小粒度的内存分割和映射的方法，使得程序的局部性原理得到充分利用，大大提高了内存的使用率
11.线程(Thread)，有时被称为轻量级进程，是程序执行流的最小单元。一个标准的线程由线程ID、当前指令指针(PC)、寄存器集合和堆栈组成。
     一个进程包含多个线程
12.不同线程读取同一个数据可能会造成数据的改变，因此，多线程程序在并发时数据的一致性变得很重要，尽管有些指令操作为原子指令，
 但是对于复杂的场合下不太适用，因此我们通过对数据的同步来防止数据被多个线程读写造成不可预料的结果。



第六章、可执行文件的装载与进程
1.进程的虚拟地址空间：以32位Linux操作系统为例，有4GB的虚拟空间，有1GB分给操作系统，3GB原则上是留给进程使用，
                                       当然，进程不能完全使用3GB的空间有一部分预留给其他用途。
2.装载方式：a.静态装入：将程序运行所需的指令与数据全都装入内存中
                     b.动态装入：将程序最常用的部分驻留在内存中，而将一些不太常用的数据存放在磁盘里面（覆盖装入、页映射）
3.进程建立：a.创建一个独立的虛拟地址空间。
                     b.读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系。
                     c.将CPU的指令寄存器设置成可执行文件的入口地址，启动运行。
4.Linux内核装载ELF过程：a.首先在用户层面，bash进程会调用fork()系统调用创建一个新的进程;
                                           b.然后新的进程调用execve()系统调用执行指定的ELF文件，原先的bash进程继续返回等待刚才启动的新进程结束;
                                           c.然后继续等待用户输入命令。
5.Windows PE的装载： a.先读取文件的第-一个页，在这个页中，包含了DOS头PE文件头和段表。
		      b.检查进程地址空间中，目标地址是否可用，如果不可用，则另外选一个装载地址。
		      c.使用段表中提供的信息，将PE文件中所有的段一- -映射 到地址空间中相应的位置。
		      d.如果装载地址不是目标地址，则进行Rebasing。
                                        e.装载所有PE文件所需要的DLL文件。
                                        f.对PE文件中的所有导入符号进行解析。.
                                       g.根据PE头中指定的参数，建立初始化栈和堆
                                        h.建立主线程并且启动进程。




