程序员的自我修养一书
第一章
第二节，主要讲了CPU和I/O之间速度不匹配而设计的硬件架构及其发展。在其中与CPU相比I/O较慢。
I/O设备分为高速和低速。
第三节主要讲了计算机的结构，和接口的解释，接口是一种协议。计算机最底层是硬件，负责提供硬件规格描述，然后是操作系统，负责提供系统的调用，然后是运行库，它提供系统的各种API，最后是系统软件，这样的设计有上层屏蔽下层，上层提供接口的特点。
第四节讲了操作系统的功能，设备驱动等等，多程序多任务的设计是为了提高CPU利用率。程序在存中的地址空间是相互隔离的，目的是为了防止其误修改其他程序和信息安全。程序运行的地址和目标地址是确定的，使用中间层把程序运行地址与目标地址建立映射关系。
第五节讲了地址的空间大小，物理地址以及虚拟地址和分段，分段可以让各进程相互隔离，确定程序运行的地址。
第六节讲了多线程，多线程可以有效利用等待时间，并且能够实现程序并发操作，发挥CPU性能。只有处理器核心大于等于执行线程数量时才是并发执行。
改变线程优先级的方式有三种：用户指定优先级，根据等待状态调整优先级，和较长时间未执行提升优先级。线程还分为不可抢占线程和可抢占线程。
线程不安全指的是多个线程同时访问可共享数据导致的不确定性。
第六章
可执行文件的装载和进程
第一节：
MMU：存管理单元，将虚拟地址转换为物理地址。
程序和进程：程序是静态的，进程是动态的。进程是程序运行时的一个过程。
程序都是运行在虚拟空间中的。
内存空间被分为系统区和用户区，系统区是不能操作的。
32位的CPU最大支持4G内存，这里指的是虚拟内存。
第二节：
程序运行时的内存往往大于物理内存，动态装载的基本原理就是程序的局部性原理，指程序用哪个就把哪个模块放到进程中去。其典型的两种方法是覆盖载入和页映射。
覆盖载入：各模块轮流共用一片内存，程序员控制某一摸快在某一时刻进入该内存。
页映射：把磁盘的所有数据以页为单位进行划分。
第三节：
讲了如何创建进程，以及程序执行的步骤。
第四节：
讲了ELF文件视图和执行视图，堆栈及其管理的空间分配和段地址和虚拟地址的映射。
第五节：
讲了Linux核装载ELF过程简介。
第六节：
讲了Windows pe 的装载。
