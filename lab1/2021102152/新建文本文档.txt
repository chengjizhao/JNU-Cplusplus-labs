第一章 温故而知新
1.1 从Hello World说起
以“Hello World”程序为切入点，提出一系列与C语言程序运行相关的问题，引发读者思考，从而开始回顾计算机系统的基本概念。
1.2 万变不离其宗
介绍计算机中最为关键的三个部件：中央处理器、内存和I/O控制芯片，讲述了CPU的发展优化。
1.3 站的高，望的远
介绍计算机软件体系结构，系统软件分为两块：平台性的如操作系统内核、驱动程序、运行库和数以千计的系统工具；用于程序开发的如编译器、汇编器、链接器等开发工具和开发库。
1.4 操作系统做什么
操作系统的一个功能是提供抽象的接口，另一个功能是管理硬件资源。
    1.4.1 不要让cpu打盹
抢占式分配CPU资源，使CPU在多个进程间快速切换，提高了cpu的利用率。
    1.4.2 设备驱动
以读取文件为例子，介绍操作系统和驱动程序的关系。
1.5 内存不够怎么办
解决内存的分配问题，通过增加中间层，即使用一种间接的地址访问方法。
    1.5.1 关于隔离
用户程序需要的是一个简单的执行环境，有单一的地址空间和自己的CPU。虚拟地址空间实现了进程的隔离，每个进程只能访问自己的地址空间。
    1.5.2 分段
分段是把一段与程序所需要的内存空间大小的虚拟空间映射到某个地址空间，使虚拟空间的每个字节和物理空间的每个字节一一。分段解决不了内存使用效率的问题，因此需要分页。
    1.5.3 分页
分页是把地址空间人为地等分成固定大小的页，把进程的虚拟地址空间按页分割，常用的数据和代码页装载到内存中，不常用的保存在磁盘里，实现内存共享。
1.6 众人拾柴火焰高
    1.6.1 线程基础
介绍线程的概念、线程的调度、线程的安全、用户线程与内核线程之间的映射关系。
一个标准的线程由线程ID、当前指令指针、寄存器集合和堆栈组成。一个进程由一个到多个线程组成，各个线程之间共享程序的内存空间。
在线程调度中，线程存在三种状态：等待，就绪，运行。
在优先级调度的环境下，线程的优先级改变：用户指定优先级、根据进入等待状态的频繁程度提升或降低优先级、长时间得不到执行而被提升优先级。
    1.6.2 线程安全
介绍线程安全的一些措施，原子操作，使用锁，读写锁。
    1.6.3多线程内部情况
介绍三种线程模型：一对一、多对一、多对多。
第六章 可执行文件的装载与进程
6.1进程虚拟地址空间
程序是静态的，进程是动态的。进程是程序运行时的一个过程，程序是预先编译好的指令和数据的集合。程序都是运行在虚拟地址空间中的。
6.2装载的方式
程序在运行时所需要的存往往大于物理存所能提供的。程序的局部性原理即程序在运行时只有一部分需要放进存。
动态装载的基本原理是程序的局部性原理， 即程序用到哪个模块就把哪个模块放进存。动态装载的两种典型的方法是覆盖装入和页映射。
     6.2.1覆盖装入
程序员手工编写用于控制模块动态装载的管理代码，被称为覆盖管理器。即各模块轮流共用存一片区域，程序员手动控制哪个模块在某一时刻进入该区域。
模块之间往往存在依赖的关系，单一模块无法完成功能，这种依赖关系使各模块间形成了树状结构。
     6.2.2 页映射
把磁盘中所有数据和指令以页为单位进行划分，装载用的也是页。
6.3从操作系统角度看可执行文件的装载
     6.3.1 进程的建立
创建独立的虚拟地址空间。
读取可执行文件头，建立虚拟地址空间与可执行文件的映射关系；
将CPU的指令寄存器设置为程序执行入口，开始运行。
     6.3.2 页错误
CPU执行到空页面产生页错误，将控制权交给操作系统处理该错误。
6.4进程虚存空间分布
操作系统关心的只是段的权限，即只读、只写、读写。
操作系统通过VMA对进程的地址空间进行管理，比如堆和栈。
堆主管空间动态分配，受操作系统版本、程序本身大小、动态/共享库数量、程序栈数量大小等因素影响。
6.5Linux内核装载ELF过程简介
bash进程调用fork()创建新进程，新进程再调用execve()系统调用执行ELF文件。
6.6Windows PE的装载
PE文件的段的起始地址和长度都是页的整数倍。每个PE文件都会被装载到某一特定地址，即目标地址/基地址。