《程序员的自我修养：链接、装载与库》第一章探讨了计算机程序的构建过程。通过深入了解编译、链接和装载的过程，我认识到了软件开发中的许多重要概念。
首先，作者强调了程序员需要了解计算机底层的工作原理，而不仅仅是编写高级代码。这一观点提醒我不仅要关注代码的功能，还要理解代码是如何被计算机执行的。这将有助于我写出更高效和可维护的代码。
其次，我了解到编译器的作用以及它是如何将源代码转化为可执行代码的。了解编译过程对于理解代码的运行效率和错误排查非常关键。此外，对静态链接和动态链接有了更深入的理解。静态链接将所有代码和库文件合并成一个可执行文件，而动态链接则在运行时加载所需的库文件。这个区别对于管理和维护大型软件项目至关重要。
最后，我也了解了库文件的重要性。库文件包含了一些常用的功能和代码，可以在多个项目中重复使用，提高了代码的重用性和可维护性。

《程序员的自我修养：链接、装载与库》第六章深入探讨了动态链接和共享库的概。这一章的内容让我认识到了如何更有效地管理和组织代码，以及如何使程序更加高效和易维护。
首先，作者详细介绍了动态链接库（DLL）的工作原理。我了解到，DLL允许多个程序共享同一个库，这不仅可以节省内存，还可以减小可执行文件的大小。我了解了DLL的内部结构，包括导出函数和符号表，这对我将来编写可供其他程序使用的库非常有帮助。
共享库（SO文件）也成为了本章的焦点。介绍了共享库如何在不同程序之间实现代码重用，并且我还了解了共享库的更新和维护更为便捷。这对于大型项目的模块化和可维护性至关重要。
除此之外，第六章还深入研究了动态链接的过程，包括了解重定位和符号解析。这些概念对于理解代码是如何在运行时加载和执行的非常重要，也有助于更好地进行调试和优化。
总的来说，第六章让我更深入地理解了库管理和动态链接的重要性。这不仅有助于提高代码的可维护性和重用性，还可以优化程序性能。
