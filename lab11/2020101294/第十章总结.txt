第十章
模式的独立性与实现方式：
模式是独立于特定实现方法的概念，可通过多种方式实现。
 基本概念是通过增加抽象层来隔离变化和不变。

创建型模式：
用于对象创建，隔离对象创建细节，使代码不依赖对象类型。
包括单例模式、工厂模式、构建器模式。

结构型模式：
影响对象连接方式，确保系统变化不影响对象连接。
受工程项目限制条件支配，包括代理模式和适配器模式。

行为型模式：
处理具有特定操作类型的对象。
包括命令、模板方法、状态、策略、职责链、观察者、多派遣和访问者模式。

信使模式：
将消息封装到对象中传递，目标是携带数据。

收集参数模式：
从传递给它的函数中获取信息，通常用于多个函数的参数传递。

单例模式：
允许一个类有且仅有一个实例，关键是防止客户程序员控制对象生存期。

命令模式：
函数对象，通过封装为对象传递特定操作，是携带行为信息的信使。

代理模式：
代理类派生自基类，通过实现类提供实际实现，控制对实现类的访问。

状态模式：
有多个实现类，动态改变实现类，与代理模式的区别在于应用和控制的不同。

模板方法模式：
定义在基类中，调用其他基类函数完成工作，坚持相同的代码，变化在编译时通过继承固定。

策略模式：
利用组合解决模板方法模式中变化的代码与坚持相同的代码分离的问题。