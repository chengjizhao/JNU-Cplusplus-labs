1. 单例模式 (Singleton Pattern)
应用场合:
当一个类只需要一个实例，并提供全局访问点时，可以使用单例模式。
适用于管理配置信息、共享资源、线程池等情况。

2. 工厂方法模式 (Factory Method Pattern)
应用场合:
当一个类不直接指定其对象的创建，而是将这个责任交给子类时，可以使用工厂方法模式。
适用于对象创建比较复杂、需要隐藏对象创建逻辑的情况。

3. 桥接模式 (Bridge Pattern)
应用场合:
当需要避免由于类和实现之间的静态绑定导致的绑定问题时，可以使用桥接模式。
适用于多维度的变化，例如操作系统和文件系统的组合。

4. 策略模式 (Strategy Pattern)
应用场合:
当一个类的行为取决于其算法，且可以在运行时更改算法时，可以使用策略模式。
适用于需要多种算法或策略，且需要动态切换的情况。