文件、流以及C++的流类库
C++流类库的优点：

简明和可读性
类型安全(type safe)
易于扩充
文件和流的概念
文件是计算机的基本概念，一般指存储于外部介质上的信息集合。
每个文件应有一个包括设备及路径信息的文件名。
其中外部介质主要指硬盘。信息是数据和程序代码的总称。

文件可分为文本(Text)文件和二进制(binary)文件。

文本文件以字节(byte)为单位，每个字节对应一个ASCII码，表示一个字符，故称为字符文件。文本文件保存的是一串ASCII字符，可用文件处理器对其进行编辑，输入输出过程中系统要对内外存的数据格式进行相应转换。
二进制文件以位(bit)为单位，实际上是由0和1组成的序列。输入输出过程中，系统不对相应数据进行任何转换。
例如，整数12345以文本文件存储时占用5bytes，而以二进制形式存储只占用2bytes。
在程序中，文件的概念不是狭义的指键盘上的文件，所有的有输入输出功能的设备，例如键盘、控制台、显示器、打印机都被视为文件。

就输入输出操作来说，这些外设和硬盘上的文件是一致的，对于程序员来说文件只与信息的输入输出相关，而且这种输入输出是串行序列形式的。于是人们把文件的概念抽象为“流”(stream)。
流是程序设计中对I/O系统中文件的抽象。C++的I/O系统定义了一系列具有某种继承派生关系的流类，并为这些抽象的流类定义了一系列的I/O操作函数。当需要进行实际的I/O操作时，只需要创建这些类的对象(称为流)，并令其与相应的物理文件(硬盘或软盘文件名或者外设名)相联系。对流的操作等同于对物理文件的操作。


C++的流类系统
C++的I/O系统并不是C++语言的一部分，它是系统为用户提供的专用于数据的输入输出的标准类(及其函数、对象)族。
实现I/O操作的主要几个类在头文件iostream中说明。下面对几个主要的类作一简介。

ios类：在其中以枚举定义方式给出一系列与I/O有关的状态标志及工作方式等常量，定义了一系列涉及输入输出格式的成员函数(包括设置域宽、数据精度等)，它还有一个数据成员是流的缓冲区指针。以类ios作为虚基类，派生出了输入流类istream和输出流类ostream。
streambuf类，负责管理流的缓冲区，包括负责设置缓冲区和在缓冲区与输入流和输出流之间存取字符的操作的成员函数。
istream类和ostream类除继承了类ios的成员之外，主要为C++的系统数据类型分别对于运算符>>和<<进行重载。
iostream类以istream类和ostream类为基类，它同时继承二者，以便创建可以同时进行I/O操作即进行输入和输出双向操作的流。
这五个类的继承关系如图所示，其中streambuf类与ios类之间没有继承关系，当I/O操作需要使用I/O缓冲区时，可以创建缓冲区对象，通过流的缓冲区指针来完成有关缓冲区的操作。大多数I/O操作的函数包括在ios类和istream类、ostream、iostream类中。

在头文件iostream中，除了类的定义之外，还包括四个对象的说明，它们被称为标准流，或预定义流，也就是由系统创建的“标准”对象。
cin是类istream的对象，为标准输入流，在不作其他说明条件下，与标准输入设备(一般指键盘)相关联。
cout是类ostream的对象，为标准输出流，在不作其他说明的情况下，与标准输出设备(显示器)相关联。
cerr、clog也是类ostream的对象，与标准错误输出设备相关联，前者为非缓冲方式，后者为缓冲方式。
对标准设备的I/O操作
I/O函数
对于字符数据的I/O提供了函数put()和get()
对于字符串数据的I/O提供了函数read()和write()
这些函数主要是为磁盘文件进行字符及字符串的输入输出而提供给用户的，其使用与插入运算符“<<”和提取运算符“>>”。

I/O函数使用的说明
friend istream& operator>>(istream& in,int& i);
friend ostream& operator<<(ostream& out,int& i);

第一个参数out是输出的目标，在对标准设备输出时，它确定为cout。
第二个参数i是输出的内容，这里是int型变量或常量
返回类型为ostream&，返回的是引用ostream&，可达到作为左值的目的，这里是标准对象cout。
用函数调用的一般方式：
cout.operator<<(x);
cout<<x

I/O的格式控制
类ios中用于格式控制的成员函数
在类ios的说明中，为了实现格式输出，做了3件事。

定义了公有的格式控制标志字，它由若干标志位组成。
定义了一些用于格式控制的公有成员函数，分别对于标志字中各标志位进行设置。
再使用另一些成员函数根据标志字来进行格式输出。
由于ios作为诸多I/O流类的基类，因此，其公有成员函数可被各派生类的对象直接调用。
标志字(状态字)的各位都控制一定的I/O特征，例如标志字的右第一位为1，表示在输入时跳过空白符号。标志字的各位以枚举类型形式定义于ios说明中。


可以使用位运算符“|”将多个格式控制标志位属性进行“合成”。例如，ios::dec|ios::showpos表示二进制数0000001000010000，它指出应输出十进制整数，正整数带加号“+”。
标志位不允许互斥。
类ios用于格式控制的公有成员函数

公有成员函数	功能
long flags()	返回当前标志字
long flags(long)	设置标志字并返回更新前的标志字
long setf(long)	设置指定的标志位
long unsetf(long)	清除指定的标志位
long setf(long,long)	设置指定的标志位的值
int width()	返回当前显示数据的域宽
int width(int)	设置当前显示数据域宽并返回原域宽
char fill()	返回当前填充字符
char fill(char)	设置填充字符并返回原填充字符
int precision()	返回当前浮点数精度
int precision(int)	设置浮点数精度(或有效数字个数)并返回原精度
附上课本上的讲解：



格式控制符
无参格式控制符定义头文件iostream
带参控制符定义在头文件iomanip.h中

无参I/O控制符	功能
endl	输出时插入换行符并刷新流
ends	输出时，在字符串后插入NULL作为结束符
flush	刷新流，将缓冲区中的当前信息立即输出到目标设备
ws	输入时略去前导的空白字符(空白、Tab键、换行)
dec	令I/O数据按十进制格式(默认数制)
hex	令I/O数据按十六进制格式
oct	令I/O数据按八进制格式
带参I/O控制符	功能
setbase(int base)	设置数制转换基数为base
resetiosflags(long IFlags)	清除参数IFlags所指定的标志位
setiosflags(long IFlags)	设置参数IFlags所指定的标志位
setfill(char cFill)	将“填充字符”设置为cFill
setprecision(int np)	设置浮点数精度为np
setw(int nw)	设置当前显示数据域宽为nw
其中setprecision当格式为ios::scientific或ios::fixed时，精度参数np指小数点后的位数，否则指有效数字个数。
有参格式控制符setw()只对随后一个数的域宽有效

磁盘文件的输入输出

包含在fstream.h头文件中
ifstream类：在本流类对象所对应的磁盘文件中输入(读)数据
ofstream类：往本流类对象所对应的磁盘文件中输出(写)数据
fstream类：往本流类对象所对应的磁盘文件进行输入和输出的双向(读写)操作。

文件的打开和关闭
文件流可分别对于ifstream类、ofstream类、fstream类说明其对象的方式创建。
访问模式	功能
ios::in	用于读入
ios::out	用于写入
ios::ate	打开并指向文件尾
ios:app	用于附加数据打开并指向文件尾
ios::trunc	如文件存在，则清除其内容
ios::nocreate	如文件不存在，则操作失败
ios::noreplace	如文件存在，则操作失败
ios::binary	二进制文件(缺省时为文本文件)

使用类成员函数对文件流进行操作
get()、put()；read()、write()；以及getline()
类成员函数get()与put()
使用类成员函数get()与put()可以对用户磁盘文件进行读与写操作。
ostream& put(char ch);
istream& get(char& rch);

类成员函数read()与write()
使用类成员函数read()与write()可以对文件进行读写操作。
通常使用read()和write()对二进制文件进行读写。
一般在处理大批量数据时，往往需要提高IO操作速度，简化IO编程，以二进制形式进行读写，效果最好。所谓二进制形式，就是简单的把文件视为一个0,1串，以位(bit)为单位，不考虑文件格式，输入输出过程中，系统不对相应数据进行任何转换
ostream& write(const char* pch,int n)
istream& read(char* pch,int n)

类成员函数getline()
istream& getline(char* pch,int n,char delim='\n');
函数getline()操作的文件通常是文本文件。

text文件和binary文件
以text文件形式存储数据，优点是具有较高的兼容性，可利用任何一个文字处理程序进行阅读或编辑修改等，缺点是存储一批纯数值信息时，要在数据之间人为地添加分隔符，否则将导致数据无法正确读出；text文件通常所占的磁盘空间较大，且不便于对数据实行随机访问（因为每一数据所占磁盘空间的大小通常不相同）。另外，在text文件的输入输出过程中，系统要对内外存的数据格式进行相应转换。

以binary文件形式存储数据，优点是便于对数据实行随机访问(每一同类型数据所占磁盘空间的大小相同，不必在数据之间人为的添加分隔符)，而且所占的磁盘空间通常比text文件要小。缺点是兼容性低，不可利用文件处理程序进行阅读或编辑修改等。另外，在binary文件的输入输出过程中，系统不对数据进行任何转换。

程序员可以决定将数据存储为text文件或者binary文件，通过将打开文件的访问模式nMode设置为ios::binary，使打开的文件为binary文件形式；在默认情况下，打开的文件为text文件形式。

对数据文件进行随机访问
为了方便二进制文件的读写，系统提供了设置和读取文件的读写指针位置的函数。其中由类istream提供函数成员：
long tellg();
istream& seekg(long offset,int dir=ios::beg);
由ostream类提供函数成员：
long tellp();
ostream& seekp(long offset,int dir=ios::beg);
其中参数offset给出相对偏移字节数，参数dir有3个取值(在ios类中说明)：
ios::beg相当于文件开头的位置
ios::cur相当于指针当前位置
ios::end相当于文件尾的位置
