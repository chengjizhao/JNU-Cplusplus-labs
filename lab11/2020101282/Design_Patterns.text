1. 单例模式（Singleton Pattern）
UML图：
+------------------+
|    Singleton    |
+------------------+
| - instance: Singleton |
+------------------+
| + getInstance(): Singleton |
| + someMethod(): void |
+------------------+
应用场合：
当一个类只应该有一个实例时，例如配置管理器、日志记录器等。
当需要提供对唯一实例的全局访问点时。

2. 观察者模式（Observer Pattern）
UML图：
+--------------+        +--------------+
|  Subject     |<>------|   Observer   |
+--------------+        +--------------+
| + registerObserver(o: Observer): void |
| + removeObserver(o: Observer): void   |
| + notifyObservers(): void            |
+--------------+                       |
| - observers: list                      |
+--------------+                       |
              ^                         v
        +--------------+
        |  ConcreteObserver |
        +--------------+
        | + update(): void |
        +--------------+

应用场合：
当一个对象的状态变化需要通知其他对象，并且不关心这些对象是谁时。
实现发布-订阅模型。

3. 策略模式（Strategy Pattern）
UML图：
+-------------+        +---------------+
|   Context   |------->|    Strategy   |
+-------------+        +---------------+
| - strategy: Strategy   |  + algorithm(): void |
+-------------+        +---------------+
                ^
                |
        +------------------+
        | ConcreteStrategyA |
        +------------------+
        | + algorithm(): void |
        +------------------+

应用场合：
当有多种算法或行为，需要在运行时选择其中之一时。
当一个类定义了多种行为，并且这些行为在其操作中以算法的形式发生。

4. 工厂模式（Factory Pattern）
UML图：
+---------------------+        +--------------+
|     Client          |------->|   Factory    |
+---------------------+        +--------------+
| + createProduct(): Product  |  + factoryMethod(): Product |
+---------------------+        +--------------+
                                  |
                          +------------------+
                          |   ConcreteFactory |
                          +------------------+
                          | + factoryMethod(): Product |
                          +------------------+

应用场合：
当一个类不能够预知它需要创建的对象的类。
当一个类希望由其子类来指定创建对象的类。
