第十章
本章介绍程序设计的重要和非传统的“模式”方法。首先介绍了设计模式的分类，共有23个模式，可以按照创造型、结构型、行为型3种目的进行分类。
创建型用于怎样创建一个对象。通常包括隔离对象创建的细节，这样代码不依赖于对象是什么类型，因此在增加一种新的对象类型时不需要改变代码。
包括单件模式、工厂模式和构建器模式。结构型是影响对象之间的连接方式，确保系统的变化不需要改变对象间的连接。
结构型模式常常由工程项目限制条件来支配。包括代理模式和适配器模式。行为型是在程序中处理具有特定操作类型的对象。
这些对象封装要执行的操作过程，比如解释一种语言、实践一个请求、遍历一个序列或者实现一个算法。包含命令模式、模板方法模式、状态模式、策略模式、职责链模式、观察者模式、多派遣模式和访问者模式的。
单件，是最简单的设计模式，它是允许一个类有且仅有一个实例的方法。创建一个单件模式的关键是防止客户程序员获得任何控制其对象生存期的权利。
为了做到这一点，声明所有的构造函数为私有，并且防止编译器隐式生成任何构造函数。
命令模式，它是一个函数对象，通过将函数封装为对象，以参数形式将其传递给其他函数或对象，告诉它们在履行请求的过程中执行特定的操作。命令模式的主要特点是允许向一个函数或者对象传递一个想要的动作。
代理模式和状态模式都提供一个代理类。代码与代理类打交道，而做实际工作的类隐藏在代理类背后。当调用代理类中的一个函数时，代理类仅转而去调用实现类中相应的函数。代理模式分为远程代理、虚拟代理、保护代理和巧妙引用。
状态模式产生一个可以改变其类的对象，当发现在大多数或者所有函数中都存在有条件的代码时，这种模式很有用。和代理模式一样，状态模式通过一个前端对象来使用后端实现对象履行其职责。
然而，在前端对象生存期期间，状态模式从一个实现对象到另一个实现对象进行切换，以实现对于相同的函数调用产生不同的行为。
适配器模式接受一种类型并且提供一个对其他类型的接口。当给定一个库或者具有某一接口的一段代码，同时还给定另外一个库或者与前面那段代码的基本思想相同的一段代码而只是表达方式不一致时，适配器模式将十分有用。
模板方法模式是应用程序结构框架中的一个基本的概念，隐藏在覆盖的下方，通过调用基类
的不同函数来驱动程序运行。一个重要特征是它的定义在基类中并且不能改动，模板方法模式就是“坚持相同的代码”。
策略模式按照“组合优于继承”的格言，可以利用组合来解决将变化的代码从“坚持相同的代码”中分开的问题，可以是一个代理类，这个类控制着对特定策略对象的选择和使用。
职责链模式被看做一个使用策略对象的“递归的动态一般化”。在职责链中，一个函数调用自身，调用函数的一个不同实现，如此反复直至达到某个终止条件。
工厂模式是用于封装对象的创建，不允许将创建对象的代码散布于整个系统。如果程序中所有需要创建对象的代码都转到这个工厂执行，那么在增加新对象时所要做的全部工作就是只需修改工厂。
构造器模式用于创建复杂对象，将对象的创建和它的“表示法”分开，创建过程保持原状，产生对象的表示法可能不同。将部件组合成为一个完整产品的算法与部件本身分开，这样就允许通过一个共同接口的不同实现来为不同的产品提供不同的算法。