编程实现第十章：本章的介绍重点为设计模式。主要可分为创建型、结构型、行为型。本章主要介绍了单件、命令模式、代理模式、状态模式、适配器模式、模板方法模式、策略模式、职责链模式、工厂模式、构建器模式、观察者模式、多重派遣。在上节课时已经对工厂模式有了初步的了解。工厂方法模式是基于纯虚函数的。工厂有纯虚工厂作为创建模板，其生产的产品也有纯虚类作为创建模板。每一个产品都要对应一个工厂，因此当增加产品时，就需要同时增加其相对应的工厂。当产品比较多时，这势必造成冗长的类定义。而抽象工厂模式不用对应具体的产品，只需要对应该类产品的抽象模板，即可完成产品的生产。这样可以在复杂情况下更加精简定义。模板方法模式通过一个模板纯虚类的创建来规范所有的继承类，同时允许自定义继承其中的函数。剩余几种设计模式还在继续阅读理解中。
/***********************第13周继续阅读***********************/
	适配器模式比较符合机器语言中层级的思想。当两个对象不兼容时，只要加一个层级即可。适配器模式就是用来实现不兼容层级的。
	职责链模式会创建一个以虚基类指针类型定义的链表，将其子类（即不同的策略）装载入链表中。当调用发生时，该调用就会顺着链表一个策略一个策略传递下去，直到某个策略满足调用或到达链表末尾。这实际上有点像switch语句。
	观察者模式是一种一对多的关系。被观察者通过调用一个函数来实现对所有观察者的信息更新，其中观察者的数量与函数调用的方式是可选的。单片机中的中断逻辑有点像一对一的观测者模式。当发生中断时，会调用中断回调函数，执行对应的处理程序。
	多重派遣还有点没看懂。
	