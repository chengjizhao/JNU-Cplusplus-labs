《C++primer Plus》第14章
1. 继承：通过公有继承，派生类可以重用基类的代码，并建立is-a关系。私有继承和保护继承也能重用基类的代码，但建立的是has-a关系。

2. 组合或包含：通过开发包含对象成员的类来重用代码，建立has-a关系。这种方法更容易实现和使用，通常优先采用。

3. 多重继承(MI)：允许在类设计中重用多个类的代码。私有MI或保护MI建立has-a关系，而公有MI建立is-a关系。但MI会引入一些问题，如名称二义性和继承多个基类对象的问题。

4. 虚基类：用于解决多重继承中的菱形继承问题，避免继承多个基类对象。使用虚基类后，需要编写构造函数初始化列表和处理二义性问题的新规则。

需要注意的是，继承和组合是两种不同的概念。继承是通过创建派生类来重用基类的代码并建立is-a关系，而组合是通过创建包含对象成员的类来重用代码并建立has-a关系。每种重用代码的方式都有其适用的场景和特点。


《C++编程思想》第9章 多继承
虚基类背后的实现机制主要包括以下几个方面：
1、 虚基类表：编译器为每个包含虚基类的类生成一个虚基类表。虚基类表的作用是存储虚基类的偏移量，以便在派生类中访问虚基类的成员时能够正确定位。
 
2、 偏移量调整：由于派生类可能同时继承多个虚基类，因此需要对虚基类的指针进行偏移量调整，确保能够正确地访问虚基类的成员。编译器在派生类的对象中添加一个指向虚基类子对象的指针，并根据虚基类表中的偏移量调整该指针的值。

3、虚基类构造与析构：在派生类对象的构造和析构过程中，需要负责初始化和清理虚基类子对象。为了避免重复构造和析构虚基类子对象，编译器使用虚基类表来跟踪已经构造和析构的虚基类子对象，并通过标记位来确保每个虚基类只进行一次构造和析构操作。

4、虚基类访问权限：虚基类具有特殊的访问权限，它可以直接由派生类访问，而不需要通过基类的引用或指针。当派生类继承多个虚基类时，可以通过指定虚基类名字来区分不同的虚基类。
