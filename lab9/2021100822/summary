### 第九章：多继承与虚基类

1. **虚基类的构造过程**：
    在C++中，创建派生类对象时，虚基类只被构造一次。
    最底层的派生类负责虚基类的构造，以确保单一实例。

2. **虚基类的存储结构**：
    虚基类的数据成员在派生类对象的内存布局中单独存储。
    避免了在每个派生类中重复存储，节省内存。

3. **虚基类的构造顺序**：
    虚基类必须在派生类的其他成员之前构造。
    由最底层的派生类开始，向上递归构造。

4. **虚基类表（VBT）**：
    C++编译器为包含虚基类的派生类维护一个虚基类表。
    表中包含虚基类的指针，用于运行时定位实例。

5. **虚基类指针（VBP）**：
    包含虚基类的派生类对象中，编译器添加一个指向虚基类表的虚基类指针。

### 第十四章：异常处理

1. **异常处理的语法**：
    使用`try`、`catch`和`throw`关键字实现。
    `try`块包含可能引发异常的代码。
    `catch`块用于捕获和处理异常。
    `throw`用于引发异常。

2. **异常类**：
    异常通常通过异常类表示。
    应派生自`std::exception`类，提供一致的接口。

3. **异常处理流程**：
    发生异常时，程序跳到最近的`catch`块。
    若无匹配的`catch`块，异常向上传播直至找到处理它的块或程序终止。

4. **异常的多态性**：
    支持多态的异常处理，可捕获基类异常以处理派生类异常。
    增强代码灵活性和可维护性。
