第十四章：
  本章将介绍类模板——另一种重用代码的方法。类模板使我们能够使用通用术语定义类，然后使用模板来创建针对特定类型定义的特殊类。
  C++还有另一种实现 has-a 关系的途径——私有继承。使用私有继承，基类的公有成员和保护成员都将成为派生类的私有成员。这意味着
基类方法将不会成为派生对象公有接口的一部分，但可以在派生类的成员函数中使用它们。
  保护继承是私有继承的变体。保护继承在列出基类时使用关键字 protected: 使用保护继承时，基类的公有成员和保护成员都将成为派
生类的保护成员。和私有私有继承一样，基类的接口在派生类中也是可用的，但在继承层次结构之外是不可用的。当从派生类派生出另一
个类时，私有继承和保护继承之间的主要区别便呈现出来了。使用私有继承时，第三代类将不能使用基类的接口，这是因为基类的公有方
法在派生类中将变成私有方法;使用保护继承时，基类的公有方法在第二代中将变成受保护的，因此第三代派生类可以使用它们。
  当派生类使用关键字 virtual 来指示派生时，基类就成为虚基类。主要变化(同时也是使用虚基类的原因)是，从虚基类的一个或多个
实例派生而来的类将只继承了一个基类对象。为实现这种特性，必须满足其他要求:（1）有间接虚基类的派生类包含直接调用间接基类构
造函数的构造函数，这对于间接非虚基类来说是非法的;（2）通过优先规则解决名称二义性。
  模板类声明也可以有友元。模板的友元分 3 类
 （1）非模板友元；
 （2）约束(bound)模板友元，即友元的类型取决于类被实例化时的类型；
 （3）非约束 (unbound)模板友元，即友元的所有具体化都是类的每一个具体化的友元。

第九章：
  一般应该把内联定义放在头文件里。当编译器看到这个定义时，它把函数类型（函数 名+返回值）和函数体放到符号表里。当使用函数时，
编译器检查以确保调用是正确的且 返回值被正确使用，然后将函数调用替换为函数体，因而消除了开销。内联代码的确占用 空间，但假如
函数较小，这实际上比为了一个普通函数调用而产生的代码（参数压栈和执 行CALL）占用的空间还少。
  在头文件中，内联函数处于一种特殊状态，因为在头文件中声明该函数，所以必须包 含头文件和该函数的定义，这些定义在每个用到该函
数的文件中，但是不会出现产生多个定义错误的情况（不过，在任何使用内联函数地方该内联函数的定义都必须是相同的）。
  能够隐藏类的底层实现是关键的，因为在以后有可能想修改这一实现。我们可能为了 效率这样做，或为了对问题有更好的理解，或因为有
些新类变得可用而想在实现里使用这些新类。任何危害实现隐蔽性的东西都会减少语言的灵活性。这样，内联函数就显得非常重要，因为它实
际上消除了预处理器宏和伴随的问题。通过用内联函数方式，成员函数可以和预处理器宏一样有效。

