 C++ Prime Plus 第14 章代码重用
1. 函数重用：通过编写可重用的函数，可以避免重复编写相似功能的代码，提高代码的简洁性和效率。C++ 提供了一种名为模板的方法，允许使用相同的函数模板处理不同类型的数据。
2. 类重用：通过创建可重用的类，可以简化相似功能的代码实现。C++ 中的继承和多态特性使得我们可以创建基类和派生类，实现代码的重用。
3. 对象重用：在 C++ 中，对象是可以被重用的实体。通过创建可重用的对象，我们可以减少代码量，提高代码的执行效率。
4. 资源管理：C++ 中的资源管理技术，如智能指针和 RAII（Resource Acquisition Is Initialization），可以帮助我们实现资源的有效重用，避免资源泄漏。
5. 代码组织：合理地组织代码结构，使其易于理解和维护。模块化编程和封装技术有助于实现代码重用，降低代码间的耦合度。



第九章“多继承”中，虚基类背后的实现机制
1. 虚基类：当一个类以virtual关键字继承另一个类时，产生的类称为虚基类。这种继承方式允许一个类仅通过一个接口就能访问多个基类。
2. 偏执基类：在多继承情况下，如果没有使用virtual关键字，编译器会自动将基类转化为成员变量，称为偏执基类。这种方式可能导致多个实例共享同一个基类对象，从而引发命名冲突和代码重复。
3. 虚基类解决冲突：使用虚基类可以解决多继承中的命名冲突问题。虚基类确保一个类仅通过一个接口就能访问多个基类，避免了实例共享导致的代码重复和命名冲突。
4. 查找顺序：在多继承中，子类会按照继承顺序查找基类。首先查找virtual继承的基类，然后是其他基类。这个过程有助于确定虚基类的查找顺序。
5. 虚基类与多态：虚基类支持多态，使得子类可以根据实际需求选择合适的基类实现。这有助于提高代码的可扩展性和可维护性。