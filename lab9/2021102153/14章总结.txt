14.1包含对象成员的类
也称为类嵌套或嵌套类。在C++中，可以在一个类中包含另一个类的对象，这个对象成为外部类的成员.
对象成员的主要优点在于可以将类的细节隐藏在实现中，且不影响类的使用者。它还可以使代码更加组织化，方便地将相关代码组合在一起，以及减少代码的重复性。
14.1.1valarray类简介
valarray类是C++标准库中提供的一个通用数组类。它是一个模板类，能够存储任意类型的数据，并提供了很多操作数组的函数和运算符。使用这些函数和运算符可以方便地对数组进行数学运算和算法实现。
valarray类的主要特点如下：
支持常规数组的操作，例如访问特定元素，对所有元素应用任意函数，以及提取部分数组。
支持所有基本数学算法，例如对valarray对象进行运算，在valarray对象之间进行运算，并进行逐元素的数学函数应用。
支持逻辑运算符，并提供了很多逻辑运算符和逻辑函数，包括元素间的比较、逐位逻辑运算和逻辑函数应用。
具有高效的并行计算能力，可以利用并行算法进行大规模数据处理。
14.1.2Student类
14.2私有继承
私有继承（private inheritance）是C++面向对象编程中的一种继承方式。与公共继承和保护继承不同的是，私有继承派生类的对象无法访问基类的非公有成员。
14.2.3保护继承
保护继承（protected inheritance）是C++中的一种继承方式，与私有继承和公共继承不同，它将基类的共有和保护成员转化为派生类的保护成员，而将基类的私有成员仍保持为私有成员。这样，在派生类中，对于基类的共有和保护成员，外部不能直接访问，只能通过派生类的成员函数来访问。
保护继承通常用于实现继承和封装的共同作用。派生类通过保护继承，继承了基类的接口和实现，同时可以通过再定义方法来重新定义接口。这提供了更好的控制派生类对基类接口访问权限的能力，从而实现更安全的封装。
14.2.4using重新定义访问权限
using关键字可以将从基类继承而来的成员重新定义为公有、保护或私有。
14.3多重继承
14.3.2处理两个基类的同名函数的方法
使用作用域解析运算符或在派生类中覆盖同名函数。
注意：使用多重继承时，需要慎重考虑继承关系的合理性和访问权限的控制，以确保派生类可以正确地访问基类成员。此外，在多重继承中，需要注意继承顺序的影响，因为不同的继承顺序可能会影响到虚函数的调用和成员变量的布局。
14.4类模板
使用 template 关键字加上类型参数列表来定义。类型参数列表中可以有多个类型参数，每个参数可以用于指定可以用在类中的不同类型。在类模板中，类型参数也可以用作默认模板参数，它们的默认值代表着可以在使用类时忽略的参数。
template <typename T, typename U = int>
14.4.1定义类模板
template<typename T1, typename T2, ...>
class MyClass {}；
14.4.2、使用模板类
MyClass<int> obj;需要在类名后面加上 <> 并指定类型参数即可
例子：
template<typename T>
T get_max(T a, T b) {
    return a > b ? a : b;
}
int a = 10;
int b = 20;
int max_val = get_max(a, b); 
注意：在模板类中，静态成员变量和静态成员函数是由所有实例化的模板类对象所共享的。
14.4.4、数组模板示例和非类型参数
在模板类中，也可以定义非类型参数，非类型参数指的是模板参数不是类型，而是常量表达式，它可以是整数、枚举、指针或引用。非类型参数可以在编译时进行计算，并使用它来定义模板类的行为。
14.4.5、模板多功能性
模板具有很强的多功能性，因为它们可以适用于许多不同的数据类型，并且还可以用于不同的实现方式和算法。模板的多功能性使得可以编写更通用、可重用的代码，从而提高代码效率和可维护性。
14.4.6、模板的具体化
显式具体化
14.4.7、成员模板
成员模板（member template）指的是定义在类或结构体中的模板函数或模板类，可以随着类或结构体的实例化而实例化。
通过成员模板，可以在类或结构体中方便地定义泛型算法和泛型数据结构，从而提高代码复用性。使用成员模板时需要注意如下几点：
在定义之外实现模板成员函数时，需要使用类名<T>::的限定符。模板类的定义要放在类声明之内。成员模板不允许被继承或者虚继承。类或结构体的模板参数列表中的形参不能与成员模板参数列表中的形参同名，否则会发生错误。
14.4.8、将模板用作参数
14.4.9、模板类和友元
当我们在模板类中声明一个友元时，需要将友元函数或类的声明放在模板类的前面，同时需要使用 template 关键字和类模板参数列表来声明友元，以指明友元函数或类也是一个模板。
