  本章主要分为一个简单的基类、继承：is-a关系、多态公有继承、静态联编和动态联编、访问控制：protected、抽象基类、继承和动态内存分配和类设计回顾几部分的内容。
C++类提供了更高层次的重用性，因为类组合了数据表示和类的方法，因此提供了比函数库更加完整的程序包。单个类就可以提供用于管理对话框的全部资源，通常，类库是以
源代码的方式提供的，这意味着可以对其进行修改，以满足需求。C++还提供了类继承方法，这种方法能够更好的方法扩展和修改类，它能够从已有的类派生出新的类，而派生
类继承了原有类(称为基类)的特征，包括方法。通过继承可以在已有的类的基础上添加功能、可以给类添加数据、可以修改类的方法的行为。
  继承通过使用已有的类(基类)定义新的类(派生类)，使得能够根据需要修编程代码。公有继承建立 is-a 关系，这意味着派生类对象也应该是某种基类对象。作为 is-a 模型
的一部分，派生类继承基类的数据成员和大部分方法，但不继承基类的构造函数、析构函数和赋值运算符。派生类可以直接访问基类的公有成员和保护成员，并能够通过基类
的公有方法和保护方法访问基类的私有成员。可以在派生类中新增数据成员和方法，还可以将派生类用作基类，来做进一步的开发。每个派生类都必须有自己的构造函数。程
序创建派生类对象时，将首先调用基类的构造函数，然后调用派生类的构造函数:程序删除对象时，将首先调用派生类的析构函数，然后调用基类的析构函数。
  如果要将类用作基类，则可以将成员声明为保护的，而不是私有的，这样，派生类将可以直接访问这些成员。然而，使用私有成员通常可以减少出现编程问题的可能性。如果
希望派生类可以重新定义基类的方法，则可以使用关键字 virtual 将它声明为虚的。这样对于通过指针或引用访问的对象，能够根据对象类型来处理，而不是根据引用或指
针的类型来处理。具体地说，基类的析构函数通常应当是虚的。
