第十三章 类继承

继承可以完成的工作：可以在已有类的基础上添加新功能；可以给类添加数据；可以修改基类方法的行为。
从一个类派生出另一个类，原始类成为基类，继承类称为派生类。
继承是由冒号，继承修饰符，基类组成的，例如：class RatedPlayer : public TableTennisPlayer{…}。
派生类包含基类对象：使用公有继承，基类的公有和保护对象会成为派生类的公有成员，私有成员仅在基类内部可见。
继承对象具有的特性：派生类对象存储了基类的数据成员(派生类继承了基类的实现)；派生类对象可以使用基类的方法(派生类继承了基类的接口)。
需要向继承类中添加的元素：派生类自己的构造函数；可根据自己的需要添加数据成员和成员函数。
派生类不能直接访问基类的数据成员，需要通过基类的公有方法来访问私有的基类成员，即派生类构造函数必须使用基类构造函数。
在创建派生类对象之前，程序首先需要创建基类对象，即基类对象应当在程序进入派生类构造函数之前被创造。实际上也可以选择不手动执行基类的构造函数，但这样做的后果是：编译器将自动添加构造函数，但这不一定符合设计。
派生类构造函数的要点：首先创建基类对象；派生类构造函数应通过成员初始化列表将基类的信息传递给基类构造函数；派生类构造函数应初始化派生类新增的数据成员。
派生类对象过期时，程序将首先调用派生类析构函数，再调用基类析构函数；这和创建是的顺序正好相反。
派生类对象可以使用基类方法，条件是方法不是基类私有的。
基类指针可以在不进行显示类型转换的情况下指向派生类对象；基类引用可以在不进行显示类型转换的情况下引用派生类对象。
基类指针和引用只能用于调用基类方法，不能使用 rt 或 pt 调用派生类的ResRanking方法。
不能将基类对象和地址赋给派生引用和指针。
基类引用定义的函数或指针参数可用于基类对象或派生类对象。
形参为指向基类的指针的函数，可以使用基类对象的地址或派生类对象的地址作为实参。
引用兼容性可以将基类对象初始化派生类对象，也可以将派生类对象赋给基类对象。
 C++ 有3种继承方式： 公有继承、保护继承和私有继承。
公有继承是最常用的方式，它建立一种is-a的关系，即派生类对象也是一个基类对象，可以对基类对象执行任何的操作，也可以对派生类对象执行。
方法的行为取决于调用该方法的对象——具有多种形态（多态），即同一个方法的行为随上下文而异。两种重要的机制可用于实现多态公有继承：在派生类中重新定义基类的方法；使用虚方法。
在类继承中可能会定义一个和基类方法同名的类方法，这个方法会覆盖基类中的方法：对于一般的类方法，程序会按照指针对应的类型调用类方法；而对于类函数定义中有virtual关键字修饰的，程序会调用真实所指向的类的方法。（若基类中某public方法被修饰为virtual，那么所继承的方法也是virtual属性的）
如果一个基类的引用是指向继承类的，那默认的析构函数将不能正确释放空间；将析构函数修饰为virtual，才能对合适的对象调用合适的析构函数；另外，如果要在派生类中重新定制方法的行为，最好也将基类的方法修饰为virtual的。
静态联编也称早期联编，是指在编译时决定时使用哪个函数；动态联编也称晚期联编，是指在执行过程中决定执行函数的哪个重载版本。
将派生类引用或指针转换为基类引用或指针被称为向上强制转换；派生类在公有继承中得到基类所有方法和数据成员，所得到的成员也可以在公有继承中传递给下游派生类；反之称为向下强制转换，通常是不允许的，除非有相关类方法完成显式强制转换。
编译器对非虚方法采用静态联编，对虚方法采用动态联编；动态联编使得开发者能够重新定义类方法；但动态联编的效率不高，所以默认情况下使用静态联编。
编译器处理虚函数的方法是：给每个对象添加一个隐藏成员，包含了一个指向函数地址数组的指针；这种数组称为虚函数表，储存为类对象进行声明的虚函数地址；例如：基类对象包含一个这样的指针，派生类也包含一个这样的一个指向独立地址表的指针；如果派生类提供了新的虚函数定义，该虚函数表将保存新函数的地址；如果派生类没有重新定义虚函数，该指针将保存函数原始版本的地址；如果派生类定义了虚函数，则该函数的地址也将被添加到派生类的函数指针数组中。
对于虚函数引入的时间空间成本，主要来自：每个对象都将增大，增大的部分为存储地址的空间；对于每个类，编译器都将创建一个虚函数的地址表(数组)；对于每个函数调用，都需要执行“到表中查找”这一额外操作。
在基类方法的声明中使用关键字virtual可使该方法在基类以及所有的派生类(包括从派生类派生出来的类)中是虚拟的。
如果使用指向对象的引用或指针来调用虚方法，程序将使用为对象类型定义的方法，而不使用为引用或指针类型定义的方法。
如果定义的类将被用作基类，则应将那些要在派生类中重新定义的类方法声明为虚拟的。
构造函数不能是虚函数，派生类不继承基类的构造函数。
析构函数应当是虚函数，除非类不用做基类。
友元不能是虚函数，因为友元不是类成员，而只有成员才能是虚函数。
如果派生类没有重新定义函数，将使用该函数的基类版本。
如果重新定义继承的方法，应确保与原来的原型完全相同，如果不相同，会导致隐藏同名基类方法。
如果基类声明被重载，则应该在派生类中重新定义所有的基类版本。
关键字protected与private相似，在类外只能用公有类成员来访问 protected 部分的类成员。
派生类可以直接访问基类保护成员，但不能直接访问基类的私有成员。
ABC必须至少包含一个纯虚方法，可以在声明中的分号前面加上 = 0 来声明纯虚方法，例如：virtual double area() const = 0。