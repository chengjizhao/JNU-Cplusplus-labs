第13章
第13章是类继承，内容包括is-a关系的继承、如何以公有方式从一个类派生出另一个类、保护访问、构造函数成员初始化列表、向上和向下强制转换、虚成员函数、早期（静态）联编与晚期（动态）联编、抽象基类、纯虚函数和何时及如何使用公有继承。
C++类提供了比较高层级的重用性，通过类库来实现，类库由类声明和实现构成。通过类继承可以在已有类的基础上添加功能、给类添加数据和修改类方法的行为。继承可以很好地帮助程序员编程，但是需要对继承进行管理，做一些调整。
继承通过使用已有的类（基类）定义新的类（派生类），使得能够根据需要修改编程代码。公有继承是最常用的方式，它建立is-a关系。派生类对象是一个基类对象，既可以对基类对象执行任何操作，也可以对派生类对象执行。多态公有继承通过在派生类中重新定义基类的方法和使用虚方法，能够将同一个方法在派生类和基类中的行为不同，让同一个方法的行为随上下文而异。派生类构造函数在初始化基类私有数据，采用成员初始化列表语法，将基类信息传递给基类构造函数，然后使用构造函数体初始化类新增的数据项。对非构造函数，派生类方法可以调用公有的基类方法。
在编译过程中进行联编称为静态联编，为了解决虚函数的难题就通过动态联编，让编译器必须生成能够在程序运行时选择正确的虚方法代码。C++中，动态联编与通过指针和引用调用方法相关，由继承控制。将派生类引用或指针转换为基类引用或指针被称为向上强制转换，这使公有继承不需要进行显式类型转换。相反的过程将基类指针或引用转换为派生类指针或引用——向下强制转换则是不被允许的，是因为is-a关系通常是不可逆。使用虚函数时，每个对象都将增大，增大量为存储地址的空间；对于每个类编译器都创建一个虚函数地址表（数组）；对于每个函数调用，都需要执行一项额外的操作，即到表中查找地址。虚函数效率比非虚函数效率稍低，但具备动态联编功能。
访问控制关键字除了public和private来控制对类成员的访问，还存在用关键字protected的访问类别，它与private相似，可以在类外用公有类成员来访问protected部分中的类成员。最好对类数据成员采用私有访问控制，但不要使用保护访问控制，同时通过基类方法使派生类能够访问基类数据。
接下来是更为复杂的抽象基类，它可以从Ellipse和Circle类中抽象出共性，将这些特性放到一个ABC中，然后从该ABC派生出Circle和Ellipse类，可以使用基类指针数组同时管理Circle和Ellipse对象。可以将ABC看作一种必须实施的接口，要求具体派生类覆盖其纯虚函数，迫使派生类遵循ABC设置的接口规则。
最后讲了继承和动态内存分配，主要是两种情况。第一种是派生类不使用new，就先看是否需要析构函数，然后复制构造函数，进行赋值。第二种是派生类使用new，在这种情况下，就必须为派生类定义显式析构函数、复制构造函数和赋值运算符，要用相应的基类方法来处理基类元素。对析构函数，是自动完成，对于构造函数，通过在初始化成员列表中调用基类的复制构造函数来完成，否则将自动调用基类的默认构造函数。对于赋值运算符，通过使用作用域解析运算符显式地调用基类的赋值运算符来完成。
