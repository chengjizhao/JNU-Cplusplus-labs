第13章
类继承是面向对象编程中的概念，它允许一个类（派生类）从另一个类（基类）继承重要的属性和行为。
派生类可以继承基类的公有成员和保护成员，但不能直接访问基类的成员。多层继承允许一个类从多个基类继承属性和行为。可以使用protected访问修饰符来限制，只能派生类以及友元类访问基类的成员。类型转换操作符允许将一个类对象转换为另一个类对象。派生类可以添加自己的派成员变量和成员函数，从而扩展基类的功能。派生类可以重写（覆盖）基类的成员函数，以改变其行为。使用虚拟可以实现运行时的多态性。派生类的构造函数可以调用基类的构造函数来初始化继承成员的关键字变量。虚基类可以解决静态继承中可能出现的二义性问题。类没有被实现的纯虚函数的类称为抽象类，它不能被初始化，只能作为基类使用。原生继承允许派生类从基类继承属性和属性，但行为基类的成员在派生类缺值继承是一类可以从多个基类继承属性和行为的特性。
虚函数允许在基类中声明一个可以在派生类中被重写的函数，从而实现多态性。抽象类通常包含纯虚函数，用于作为接口的定义。聚合类是一种特殊的类，它只包含公有的数据成员，没有成员函数或构造函数。多态性是指不同对象上的相同函数有不同的表现形式，可以通过虚函数实现。静态多态性（早期绑定）是在编译时确定函数调用的类型，动态多态性（晚期绑定）是在运行时确定函数调用的类型。虚析构函数可以确保在派生类对象被删除时正确调用虚析构函数。菱形继承是静态继承中可能出现的问题，可以通过虚继承解决。