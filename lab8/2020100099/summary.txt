C++ Primer Plus第13章主要介绍了类的继承和多态性。以下是该章的关键内容总结：

1. 继承（Inheritance）是面向对象编程中的重要概念，它允许创建一个新类，从现有的类中派生出来（称为基类或父类），并继承其成员变量和成员函数。
2. 派生类（Derived class）可以通过继承基类的成员来扩展或修改其行为。派生类可以添加新的成员变量和成员函数，并且可以重写（override）基类的虚函数。
3. 继承的类型包括公有继承（public inheritance）、私有继承（private inheritance）和保护继承（protected inheritance）。公有继承表示派生类的对象可以访问基类的公有成员，私有继承表示派生类的对象不能直接访问基类的成员，保护继承类似于私有继承但允许派生类的派生类访问基类的保护成员。
4. 多态性（Polymorphism）是面向对象编程中的另一个重要概念。多态性允许使用基类的指针或引用来操作派生类的对象，实现动态绑定。多态性能够在运行时确定调用哪个虚函数，而不是在编译时确定。
5. 虚函数（Virtual function）是用virtual关键字声明的成员函数，它可以在基类中被派生类重写。通过使用虚函数，可以实现在运行时根据对象类型调用正确的函数。
6. 抽象基类（Abstract base class）是一个只包含纯虚函数的类。纯虚函数通过在声明中使用“= 0”来指定，纯虚函数没有定义，必须在派生类中重写。抽象基类不能实例化为对象，但可以用作其他类的基类。
7. 虚析构函数（Virtual destructor）是一个在基类中声明为虚函数的析构函数。当使用基类指针删除派生类对象时，应该使用虚析构函数，以确保正确地释放派生类资源。
8. 抽象数据类型（Abstract data type）是一种通过封装数据和操作来表示现实世界对象的方式。通过将数据和相关操作封装到一个类中，可以实现数据的隐藏和访问的控制。
总之，C++ Primer Plus第13章介绍了继承和多态性的概念和用法。通过继承，可以创建具有共享特征的派生类，并通过多态性实现动态绑定，提高程序的灵活性和可扩展性。