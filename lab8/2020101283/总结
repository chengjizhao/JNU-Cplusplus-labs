类继承是一种重要的概念，派生类可以继承基类的公有成员函数和公有数据成员，并且可以添加自己的成员函数和成员变量。
使用派生类通常与使用基类类似，可以使用基类的指针或引用来访问派生类的对象，称为"向上转型"。
派生类和基类之间有特殊关系，派生类可以访问基类的公有成员，重写基类的虚函数，并通过扩展自己的成员函数和成员变量来扩展基类的功能。
多态是通过虚函数实现的，可以在运行时确定实际调用的成员函数。使用公有继承和虚函数来实现多态。
静态联编（早绑定）在编译期间完成函数调用的解析，而动态联编（晚绑定）在运行时根据实际对象类型进行函数解析。
C++中可以将一种类型的地址赋给另一种类型的指针或引用。
抽象基类是包含至少一个纯虚函数的类，不能直接实例化，只能通过派生类来创建对象。
在使用new操作符创建派生类对象时，需要先为基类子对象分配内存空间，再为派生类对象分配内存空间，并调用相应的构造函数。
