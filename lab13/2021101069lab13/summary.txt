三种智能指针分别为 std::unique_ptr，std::shared_ptr 和 std::weak_ptr：
std::unique_ptr：
使用方法：通过 std::make_unique 创建，或使用 std::unique_ptr 构造函数。
特点：拥有资源的唯一所有权，即同一时间只能有一个 unique_ptr 指向某个资源。当 unique_ptr 被销毁（例如超出作用域或被重新赋值）时，它所指向的资源也会被自动删除。
使用场景：适用于需要独占所有权的情况，例如文件读写、线程独占的资源等。
std::shared_ptr：
使用方法：通过 std::make_shared 创建，或使用 std::shared_ptr 构造函数。
特点：可以共享资源的所有权，即可以有多个 shared_ptr 同时指向同一个资源。资源的引用计数会增加或减少，当引用计数为0时，资源会被自动删除。这解决了 unique_ptr 不能共享资源的问题。
使用场景：适用于需要在多个对象之间共享资源的情况，例如多个线程或对象需要使用同一个数据库连接或其他昂贵资源。
std::weak_ptr：
使用方法：通过 std::weak_ptr 构造函数从 shared_ptr 或另一个 weak_ptr 创建。
特点：对资源的引用不会增加资源的引用计数，因此不能阻止资源被删除。但是它可以观察资源是否存在，如果需要访问资源，必须先升级为 shared_ptr。这解决了 shared_ptr 可能导致的循环引用问题。
使用场景：适用于需要观察但不拥有资源的情况，例如在观察者模式或实现缓存等场景中。
