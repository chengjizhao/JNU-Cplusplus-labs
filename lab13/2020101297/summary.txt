1、std::unique_ptr
std::unique_ptr 是一种独占式智能指针，即同一时刻只能有一个指针指向资源。
它的特点是：
拥有被指向对象的唯一所有权
不支持多个指针指向同一对象
可以通过 std::move 转移所有权
可以自定义删除器
由于其独占式的特点，std::unique_ptr 适用于那些只需要单一所有权的场景，比如管理动态分配的内存或文件句柄等资源。

2、std::shared_ptr
std::shared_ptr 是一种共享式智能指针，即多个指针可以指向同一个资源，并且当最后一个指针离开作用域时，该资源才会被释放。
它的特点是：
多个 std::shared_ptr 可以共享同一块内存资源
支持自定义删除器
支持弱引用 std::weak_ptr
由于其共享式的特点，std::shared_ptr 适用于那些需要多个所有权的场景，比如在函数间传递一个对象的所有权或者管理一个对象的生命周期。

3、std::weak_ptr
std::weak_ptr 是一种弱引用智能指针，它指向一个 std::shared_ptr 所管理的对象，但不会增加该对象的引用计数。它的特点是：
可以通过 std::lock 获得一个指向被管理对象的 std::shared_ptr
不会改变被管理对象的引用计数
当被管理对象被释放时，会自动失效
由于其弱引用的特点，std::weak_ptr 适用于那些需要观察一个对象是否存在的场景，比如解决循环引用问题。
