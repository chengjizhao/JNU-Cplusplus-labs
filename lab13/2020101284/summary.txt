独占式智能指针（std::unique_ptr）：
使用方法：独占式智能指针提供了对动态分配对象的独占所有权，只能有一个指针指向所管理的对象。它通过使用移动语义来转移所有权，不支持拷贝语义。
特点：独占式智能指针在所有权转移方面非常强大，当指针超出作用域或被显式释放时，会自动删除所管理的对象。它是最轻量级的智能指针，没有额外的开销。
使用场景：适用于需要严格的所有权控制的情况，例如动态分配的对象在其生命周期内只能由一个所有者拥有。

共享式智能指针（std::shared_ptr）：
使用方法：共享式智能指针允许多个指针共享对同一对象的所有权，可以通过拷贝和赋值来共享所有权。
特点：共享式智能指针使用引用计数来跟踪对象的引用数，当引用数变为零时，会自动删除所管理的对象。它可以在多个地方共享对象所有权，具有较高的灵活性。
使用场景：适用于存在多个拥有者的情况，例如对象需要在多个地方被访问或共享资源的情况。

弱引用智能指针（std::weak_ptr）：
使用方法：弱引用智能指针用于解决共享式智能指针可能导致的循环引用问题。它可以引用由共享式智能指针所管理的对象，但不增加引用计数。
特点：弱引用智能指针不拥有对象的所有权，它只是观察者，可以检查所管理的对象是否存在。当对象被销毁后，弱引用指针会自动失效。
使用场景：适用于存在潜在循环引用的情况，例如对象之间存在互相引用的关系，但需要避免内存泄漏。
