std::unique_ptr：
使用方法： std::unique_ptr 是一种独占所有权的智能指针，不能被复制或共享。它通过移动语义来转移所有权。
特点： 一次只能有一个 std::unique_ptr 指向同一块内存，确保在其生命周期结束时会自动释放内存。
使用场景： 当需要确保只有一个指针能够访问并拥有某块内存时，通常使用 std::unique_ptr。

std::shared_ptr：
使用方法： std::shared_ptr 允许多个智能指针共享同一块内存。内部使用引用计数来追踪共享的指针数量，当计数为零时释放内存。
特点： 自动管理内存释放，并提供共享所有权的能力。
使用场景： 当需要多个指针共享同一块内存，且无法确定哪个指针会先被销毁时，使用 std::shared_ptr。

std::weak_ptr：
使用方法： std::weak_ptr 是为了解决 std::shared_ptr 的循环引用问题而引入的。它可以与 std::shared_ptr 共同工作，但不会增加引用计数。
特点： 不影响引用计数，允许检查所指向的对象是否存在。
使用场景： 当存在可能导致循环引用的场景时，使用 std::weak_ptr。
