unique_ptr
std::unique_ptr<int> ptr(new int(10));
唯一拥有其所指向的对象,同一时间只有一个unique_ptr可以指向某个对象。当unique_ptr被销毁（例如离开作用域）时，它所指向的对象也会被自动销毁。
适用场景:当知道某个对象在任何时刻都只会被一个智能指针管理时。

shared_ptr
std::shared_ptr<int> ptr1 = std::make_shared<int>(10);  
std::shared_ptr<int> ptr2 = ptr1; 
可以共享所有权,多个shared_ptr可以指向同一个对象，当最后一个指向该对象的shared_ptr被销毁或重置时，该对象才会被删除。使用引用计数机制来管理内存。
适用场景:当一个对象可能被多个智能指针同时管理时。

weak_ptr
std::weak_ptr<int> ptr = ptr1;`
不拥有其所指向的对象，只是观察对象。可以安全地与shared_ptr一起使用，不会增加引用计数。
适用场景:观察对象，但不希望影响其生命周期时。当一个shared_ptr指向某个对象，只想观察这个对象，而不希望指针影响其生命周期。