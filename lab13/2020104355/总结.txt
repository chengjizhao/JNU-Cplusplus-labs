C++提供了三种智能指针：unique_ptr，shared_ptr 和 weak_ptr。它们用于管理动态分配的内存，以避免内存泄漏和其他与内存管理相关的问题。
1、unique_ptr
使用方法：unique_ptr 是 C++11 引入的一种独占所有权的智能指针，用于管理动态分配的内存。通过使用 std::move 函数，可以进行所有权转移。std::unique_ptr<T> ptr(new T);
特点：独占式智能指针，一次只能有一个unique_ptr指向一个对象。当unique_ptr超出范围或被显式地释放时，它所指向的对象会被自动销毁。
使用场景：当你需要确保只有一个指针指向一个对象，并且该指针负责销毁该对象时，可以使用unique_ptr。
2、shared_ptr
使用方法：shared_ptr 是一种多个指针共享相同对象所有权的智能指针，通过引入引用计数的方式来管理对象的共享。std::shared_ptr<T> ptr(new T); 或者 std::make_shared<T>(args);
特点：共享式智能指针，多个shared_ptr可以指向同一个对象。对象的销毁发生在最后一个指向它的shared_ptr被销毁时。
使用场景：当你需要多个指针共享同一个对象，并且只有当所有这些指针都超出范围时，该对象才应该被销毁时，可以使用shared_ptr。
3、weak_ptr
使用方法：weak_ptr 是一种不控制对象生命周期的智能指针，它可以从一个 shared_ptr 或另一个 weak_ptr 对象构造，它只能用于与 shared_ptr 对象共同工作。std::weak_ptr<T> ptr(shared_ptr);
特点：弱引用智能指针，它指向一个由shared_ptr管理的对象，但不会增加对象的引用计数。它主要用于解决shared_ptr的循环引用问题。
使用场景：当你需要解决两个或多个shared_ptr之间的循环引用问题时，可以使用weak_ptr。