C++中有三种智能指针：unique_ptr、shared_ptr和weak_ptr。

1. unique_ptr：
- 特点：unique_ptr是一种独占所有权的智能指针，不能被复制或赋值，只能通过移动语义转移所有权。当unique_ptr超出作用域时，指向的对象会被自动销毁。
- 使用场景：适用于需要独占所有权的情况，例如管理动态分配的资源。

2. shared_ptr：
- 特点：shared_ptr是一种共享所有权的智能指针，可以被复制和赋值，内部使用引用计数来管理指向的对象。当引用计数为0时，对象会被自动销毁。
- 使用场景：适用于多个指针需要共享同一个对象的情况，可以避免手动管理内存释放。

3. weak_ptr：
- 特点：weak_ptr是一种弱引用的智能指针，它可以从一个shared_ptr或另一个weak_ptr对象构造而来，但不会增加引用计数。当指向的对象被销毁后，weak_ptr会自动变为nullptr。
- 使用场景：适用于解决shared_ptr的循环引用问题，可以避免内存泄漏。

unique_ptr适用于独占所有权的情况，shared_ptr适用于多个指针共享同一个对象的情况，而weak_ptr适用于解决循环引用问题。
