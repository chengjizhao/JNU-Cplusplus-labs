unique_ptr 是独占式所有权的智能指针，即同一时间只能有一个 unique_ptr 拥有该对象的所有权，不能进行复制和赋值操作，只能通过 std::move() 来转移所有权。当 unique_ptr 超出作用域时，它所拥有的对象会自动被销毁，避免了内存泄漏的问题。使用场景：适用于需要独占式所有权的场景，如在容器中存储对象，或者对于不需要共享的资源。

shared_ptr 允许多个指针同时拥有同一个对象，具有计数机制，当最后一个 shared_ptr 被销毁时，才会释放对象所占用的内存。shared_ptr 可以进行复制和赋值操作，每次复制会增加对象的引用计数，每次销毁会减少引用计数。使用场景：适用于需要多个指针共享同一个对象的场景，比如多个线程需要访问同一个对象。

weak_ptr 也是用于共享对象所有权，但是它不会增加对象的引用计数，在弱引用所指向的对象被释放时，弱引用会自动变成空指针。weak_ptr 可以从 shared_ptr 创建，也可以使用 lock() 方法获取一个 shared_ptr。使用场景：适用于需要共享对象所有权，但是不希望对象被强引用的场景，比如循环引用的问题。