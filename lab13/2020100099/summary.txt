C++中有三种智能指针：unique_ptr、shared_ptr和weak_ptr。

1. unique_ptr：
   - 特点：unique_ptr是一种独占所有权的智能指针，即同一时间只能有一个unique_ptr指向同一个对象。当unique_ptr被销毁或者通过std::move转移所有权时，它所指向的对象会被自动释放。
   - 使用场景：适合用于管理动态分配的对象，避免内存泄漏和手动释放内存的问题。

2. shared_ptr：
   - 特点：shared_ptr是一种可以共享所有权的智能指针，可以由多个shared_ptr共同指向同一个对象，管理对象的生命周期，并且会自动释放内存。
   - 使用场景：适合用于多个地方需要共享同一个对象的情况，比如在多个函数之间传递对象，或者在容器中存储对象。

3. weak_ptr：
   - 特点：weak_ptr是一种弱引用的智能指针，它不会增加对象的引用计数，只是用于观测shared_ptr的生命周期，防止shared_ptr的循环引用导致内存泄漏。
   - 使用场景：适合用于避免循环引用的情况，比如在使用shared_ptr组成的环状数据结构时，可以使用weak_ptr来打破循环引用。

总的来说，unique_ptr适合单一所有权的情况，shared_ptr适合多个地方需要共享对象的情况，而weak_ptr适合避免循环引用的情况。选择合适的智能指针可以更好地管理内存，避免内存泄漏和提高程序的安全性。