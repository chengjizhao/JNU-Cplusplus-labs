unique_ptr：
  使用方法：
  unique_ptr 提供独占所有权的智能指针，即同一时间只能有一个 unique_ptr 拥有对内存资源的所有权。可以使用 std::make_unique 函数或使用 new 运算符来创建 unique_ptr。
  特点：
  1、它直接将拷贝构造函数和赋值重载函数给禁用掉，因此，不让其进行拷贝和赋值。
  2、当 std::unique_ptr 被销毁时，它负责释放所拥有的对象的内存。
  3、不允许多个 std::unique_ptr 共享同一个对象。
  使用场景：管理动态分配的单个对象或数组，避免内存泄漏；在方法或函数返回时传递临时所有权。

shared_ptr：
  使用方法：
  shared_ptr 提供共享所有权的智能指针，允许多个智能指针指向同一块资源，并且能够保证共享的资源只会被释放一次。可以使用 std::make_shared 函数或使用 new 运算符来创建。
  特点：
  1、允许多个指针共享同一个对象的所有权，计数器用于跟踪引用数。
  2、当最后一个 shared_ptr 结束生命周期时，关联的对象才会被销毁。
  3、可以使用自定义的删除器函数来管理资源的释放。
  4、支持拷贝构造和拷贝赋值。
  使用场景：与多个对象共享拥有权的情况；维护对象的生命周期。

weak_ptr：
  使用方法：
  weak_ptr 用于解决 shared_ptr 的循环引用问题，它提供了对 shared_ptr 对象的弱引用。可以通过 shared_ptr 创建 weak_ptr。
  特点：
  1、用于解决由于互相引用而导致的对象无法释放的情况。
  2、weak_ptr 不增加引用计数，不拥有对象的所有权。
  3、可以通过 lock() 获取所管理的对象的强引用指针，如果对象已经被销毁，则返回空指针。
  使用场景：在可能出现循环引用的情况下，可以使用 weak_ptr 打破循环引用。
  
