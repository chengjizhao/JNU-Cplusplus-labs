unique_ptr

使用方法：std::unique_ptr<T> ptr(new T);
特点：unique_ptr保证其指向的对象在任何时候都只有一个所有者。当unique_ptr超出范围或被显式地释放时，它所指向的对象会被自动销毁。这有助于防止内存泄漏。
使用场景：当对象需要在堆上分配内存，且只需要一个所有者时，可以使用unique_ptr。例如，一个自定义的类对象，你希望在某个作用域结束时自动释放其内存。
shared_ptr

使用方法：std::shared_ptr<T> ptr(new T);
特点：shared_ptr允许多个所有者共享同一个对象。当最后一个shared_ptr离开作用域或被显式地重置时，它所指向的对象会被自动销毁。shared_ptr通过引用计数来跟踪有多少个shared_ptr指向同一个对象。
使用场景：当对象需要在堆上分配内存，且可能有多个所有者时，可以使用shared_ptr。例如，两个函数都可能返回指向同一个对象的指针，或者一个容器中存储多个指向同一对象的指针。
weak_ptr

使用方法：std::weak_ptr<T> ptr(shared_ptr<T>);
特点：weak_ptr指向一个由shared_ptr管理的对象，但不会增加该对象的引用计数。这允许你在不破坏shared_ptr的情况下访问或重新分配该对象。
使用场景：当你需要创建一个指向shared_ptr管理的对象的弱引用，以便在不影响对象生命周期的情况下访问它时，可以使用weak_ptr。例如，一个函数返回一个shared_ptr，但你需要在另一个作用域中访问该对象，而不影响其生命周期。
这三种智能指针是C++标准库提供的重要工具，可以帮助开发者更安全、更有效地管理动态内存分配。
