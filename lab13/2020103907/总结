unique_ptr：
使用方法：uniqueptr是独占型指针，只能有一个指针与其拥有的资源关联。可以通过makeunique函数或new关键字创建unique_ptr对象，也可通过reset函数重新指定资源。
特点：unique_ptr禁止多个指针同时指向同一个资源，因此拥有最低的内存开销和最高的性能。它可以在函数返回时自动释放资源。
使用场景：在需要唯一拥有资源的情况下，如管理一个动态分配对象时，可以使用unique_ptr。它适合用于实现资源的所有权转移和资源的局部化管理。

shared_ptr：
使用方法：sharedptr允许多个指针共享同一个资源。可以通过makeshared函数或new关键字创建shared_ptr对象，并可以通过reset函数重新指定资源。
特点：sharedptr使用引用计数来跟踪有多少个指针共享一个对象。在最后一个指针离开作用域时，引用计数为零时，资源会被自动释放。sharedptr还支持自定义的deleter函数。
使用场景：在需要共享资源的情况下，如多个对象需要访问同一个动态分配对象时，可以使用shared_ptr。它适合用于实现引用计数和循环引用的资源管理。

weak_ptr：
使用方法：weakptr是一种观察型指针，用于弱引用一个由sharedptr管理的对象。可以通过lock函数将weakptr转换为sharedptr，以便访问被观察的对象。
特点：weakptr不会增加引用计数，不会阻止资源的释放。它是为了解决sharedptr可能导致的循环引用问题而引入的。当对象的最后一个sharedptr离开作用域时，对象会被销毁，weakptr会自动失效。
使用场景：在需要观察由sharedptr管理的对象的情况下，如需要检查对象是否存在或进行安全的访问时，可以使用weakptr。它适合用于解决循环引用和避免悬空指针的问题。
