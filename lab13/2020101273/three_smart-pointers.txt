1. unique_ptr
    - 使用方法：通过 new 关键字创建动态分配的对象，并将其托管给 unique_ptr。
    - 特点：独占型智能指针，只能有一个 unique_ptr 指向同一个对象。当 unique_ptr 离开作用域时，其所指向的对象会被自动释放。
    - 使用场景：适用于需要确保对象生命周期与 unique_ptr 生命周期一致的场景，例如函数参数传递、局部变量等。
2. shared_ptr
    - 使用方法：通过 new 关键字创建动态分配的对象，并将其托管给 shared_ptr。
    - 特点：共享型智能指针，可以有多个 shared_ptr 指向同一个对象。每个 shared_ptr 内部维护一个引用计数。当引用计数为零时，对象被自动释放。
    - 使用场景：适用于需要共享对象所有权且确保对象生命周期与 shared_ptr 生命周期一致的场景，例如多线程共享对象、全局变量等。
3. weak_ptr
    - 使用方法：通过 new 关键字创建动态分配的对象，并将其托管给 weak_ptr。
    - 特点：弱引用型智能指针，不能直接操作对象，但可以观察对象的生命周期。当 weak_ptr 所指向的对象被释放时，weak_ptr 也会被自动释放。
    - 使用场景：适用于需要观察对象生命周期但不需要共享对象所有权的场景，例如用于外部接口、多线程间通信等。