1. std::unique_ptr:
   特点：独占所有权，不能被复制或共享。
   使用方法：适用于拥有唯一所有权的情况，通过移动而非复制指针。
   使用场景：在需要独占资源、避免资源泄漏的情况下使用，例如管理动态分配的内存。
2. std::shared_ptr:
   特点：共享所有权，使用引用计数来跟踪对象的引用次数。
   使用方法：多个`shared_ptr`可以共享相同的资源，引用计数减到零时释放资源。
   使用场景：在需要多个指针共享同一份资源，且不确定哪个指针会最后释放资源的情况下使用。
3. std::weak_ptr:
   特点：弱引用，不增加引用计数，可用于避免循环引用。
   使用方法：通常与`std::shared_ptr`一起使用，通过`lock()`方法获取一个指向共享资源的`std::shared_ptr`，但不影响引用计数。
   使用场景：主要用于解决`std::shared_ptr`可能引发的循环引用问题，避免内存泄漏。
