第一章主要讲述了学习c++的预备知识，包括了c++的简介：c++是在c的基础上发展的学习c++需要摒弃c的一些言语习惯；还讲述了c语言的历史和c++的发展背景：c++的诞生是为了使编程者更加好的编写程序，c++是c语言的超集，c++加入了opp的特性和对c的泛型编程支持。还讲述了c++程序的创建和运行基本流程。
第二章主要讲述了c++程序编写的一些简单基础，从c++对大小写的敏感到main()函数的讲解，包括返回值return0在int main()条件下使用。还包含了对头文件iostream，注释方式，using namespace std;的使用。
第三章主要讲述了c++数据处理的方式。从最简单的short、int、long和long long再到const定义常量再到类型转换的方式最后到auto定义让c++自己根据程序判断变量的类型。
第四章是对前面内容的加深，从struct结构体的介绍到指针的使用，后又引出了使用new来分配内存：new将找到一个正确的内存块，并返回该内存块的地址。new分配的内存块通常与常规变量声明分配的内存块不同。new从堆区或自由存储区的内存区域分配内存，常规声明变量从栈区分配内存。一定要配对使用new和delete。delete的使用用于内存的释放。

第十六章从string类型开始讲解后又讲述了智能指针模板类：new double 是 new 返回的指针，指向新分配的内存块。使用 new 分配内存时，才能使用 auto_ptr 和 shared_ptr，使用 new [] 分配内存时，不能使用它们。不使用 new 分配内存时，不能使用 auto_ptr 或 shared_ptr；不使用 new 或 new [] 分配内存时，不能使用unique_ptr。然后又介绍了标准模板库STL：STL 提供了一组表示容器、迭代器、函数对象和算法的模板。其中迭代器是一个广义指针。它可以是指针，也可以是一个可对其执行类似指针的操作（如解除引用和递增）的对象。后又对泛型编程进行阐述：泛型编程是一种关注算法的编程风格，这种风格应避免直接使用迭代器，而应尽可能使用 STL 函数，从而尽可能多的创建可重用代码。后又介绍了自适应函数符号：预定义函数符都是自适应的，因为它携带了标识参数类型和返回类型的 typedef 成员。后又对STL中的算法进行分类：就地算法：结果被放在原始数据的位置。复制算法：结果被放在另一个位置。最后讲述了c++中的其他库例如：std::vector<double> payments {45.99, 39.23, 19.95, 89.01};这段代码就是使用容器类以initializer_list<T>作为参数的构造函数。
第十七章开头对c++输入输出进行了介绍：对输入进行缓冲可以让用户在将输入传输到程序之前返回并更正。C++程序通常在用户按下回车键时刷新输入缓冲区。cin、wcin：用于标准输入流，默认关联到标准输入设备。cout、wcout：用于标准输出流，默认关联到标准输出设备。cerr、wcerr：用于标准错误流，默认关联到标准输出设备。这个流没有缓冲区。log、wclog：用于标准错误流，默认关联到标准输出设备。这个流有缓冲区。然后对cout的用法进行了介绍：使用cout可以修改进制以十进制、十六进制或八进制显示，可用 dec、hex 或 oct 控制符。例如：hex(cout);cout << hex;还有调整字段宽度：width 方法只影响将显示的下一个项目，然后字段宽度将恢复为默认值。width 是成员函数，因此必须使用对象来调用它。例如：cout << '#';cout.width(12);cout << 12 << "#" << 24 << "#\n";填充字符：默认情况下，cout 用空格填充字段中未被使用的部分，可使用 fill 成员函数来改变，与 width 不同的是一直有效。cout.fill('*');设置浮点数显示精度：默认情况下是6，使用 precision 成员函数来改变，与 width 不同的是一直有效。例如：cout.precision(2);打印末尾的 0 和小数点：ios_base 类提供了 setf 函数控制多种格式化特征，还定义了多个常量，用作该函数的参数。例如：cout::setf(ios_base::showpoint);标准控制符：C++提供了多个控制符，能调用 setf，并自动提供正确的参数。如前面提到的 dec、hex 和 oct。如下面语句打开左对齐和定点选项：cout << left << fixed;后又对cin的输入进行介绍：cin 解释输入的方式取决于存储输入内存单元的数据类型。然后又对文件的输入输出进行介绍：对于大多数实现来说，包含 fstream 文件便自动包含iostream 文件。创建多个 ofstream/ifstream 对象也会创建多个对应的缓冲区。以默认模式打开文件进行输出将自动把文件长度截为0，这相当于删除已有内容，当输入/输出流对象过期时，到文件的连接将自动关闭。也可使用 close 方法显式关闭，这种方法并未删除流，可以重新连接到同一个或另一个文件。文件有文本模式和二进制模式。对于字符来说，表示都是一样的，但对于数字，文本模式会将其转换为对应字符保存，而二进制模式保存的是对应的值。使用 write/read 方法保存/读取二进制文件，这也适用于不使用虚函数的类。这种情况下只有数据数据成员被保存，而方法不会。如果类有虚方法，会复制隐藏指针，但下次运行程序时，虚函数表可能在不同位置，因此将该指针复制到对象中，可能造成混乱。string 对象本身没有包含字符串，而是指向字符串内存单元的指针，将其保存在文件时需要注意。
