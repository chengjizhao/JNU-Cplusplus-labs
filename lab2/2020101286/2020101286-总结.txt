阅读总结
第1章主要介绍了C语言和C++的起源和发展，概述了C语言和C++的区别，其中比较多讲了C++的可移植性。然后又介绍了创建C++程序的过程，包括了如何创建源代码文件、如何进行不同编译器的编译和链接。这一章是比较基础的一章节，大概让我了解了C++的基本信息，尤其是重点讲述了C语言是过程性编程和C++是怎样在C语言基础上添加面对对象编程的。
第2章开始运用一些简单的代码，来对C++一些语句的作用进行说明，主要是#include、main()、cout、end1、cin这几个我们在编程时非常常用的指令和函数。对于这几个指令和函数，不仅仅要知道它们的作用和如何使用，也要明白它们究竟是如何执行和运行的，这一章就很好地解答了这个问题。还有一个比较重要的点就是变量，我们在编程的过程中会涉及到各种变量，对于这些变量一定要学会如何创造和使用，这样能方便我们进行编程。这一章还介绍了其它语句，都是一些比较常用的语言，需要我们大致地进行了解明白如何使用，日常使用中遇到能够想起来如何使用，或是及时进行相关书籍的查阅。
第3章主要讲了我们应当怎么样进行数据的处理。C++自带的两种数据类型是整数和浮点数，整型又分为short、int、long和longlong，这些不同整型的位数都不相同，而且C++是仅仅提供了灵活的标准即只是确保了最小长度，让编程者能够较为自由地进行数据位数的输入输出。然后还介绍了各种运算符对数字类型的运算，C++的优先级和综合性规则可以确定执行两个或多个运算符的运行先后。
第4章讲了如何运用C++进行不同基本类型的复合，这些类型有数组、结构和指针。首先就介绍了数组，数组是我们编程中比较常用的一种数据格式，在C语言中我们已经较多使用过数组以实现一些数据的存储和调用。和C语言相似，C++运用数组也是可以执行这一功能，不过相较C语言会稍微麻烦一点点。然后就是介绍了字符串，还介绍了如何创建和存储文本字符串和处理文本的输入输出，这里面就有较为常用的getline()函数。接着就用比较大的篇幅详细介绍了指针在这几个类型的应用，以及自由存储空间，这些都是比较重要的。最后还介绍C++如何处理内存分配，包括显式地管理内存new和delete运算符。本章最后简略地介绍了一下类型的组合和数组的替代品模板类vector和array，这些都可以对我们已有C语言和C++知识的补充，它们分别是不同类型数组的替代品。
1到4章都是我们在C语言就有接触到的知识，这些都是比较基础的知识。通过C语言引入，将其和C++进行类比，能够让我们更快地理解C++是如何运行和执行语句的，并较快学会使用C++进行编程。
第16章主要讲了C++中的string类和标准模板库，还有一些新增的类库，如auto_ptr、STL、valarrary等、这些都是C++里面能够帮助我们简化编程复杂程度的一些库。首先就是string类，这是用于处理字符串的。从构建到输入，再到使用都通过代码非常详细地进行说明，让我对于字符串有了更深地了解。然后就是智能指针模板类，相对于指针来说功能更多。接下来介绍了标准模板库，这里面包括了类型和操作。最后介绍了一些我们以前很少接触的如迭代器、容器这一类的概念，能够让我们了解到这些相对较难的知识。
第17章通过复习C++的I/O，学习C++如何对文件进行管理、输入和输出。其它的还有如何追加数据、使用二进制文件、获得对文件的随机访问权以及用I/O方法读取写入字符串。首先是进行了C++程序的输入和输出的原理介绍，包括流和缓冲区和iostream文件。然后就是介绍C++的输出方式cout，这和C语言的输出方式不太相同。这里涉及到了用cout进行格式化等内容，使用了较大的篇幅和很多的代码举例进行说明。接下来就是介绍了C++的输入方式cin，重点介绍了流状态，包括如何设置以及它的影响，并在最后还介绍了其他istream类方法。然后介绍了文件的输入和输出，并且对比了C语言和C++的文件打开方式。最后以非常简答的例子介绍了内核格式化。
16、17两章通过代码的举例和C语言的类比，非常详细地介绍了使用C++的多种类库，以及编程时怎么进行字符串的输入和输出，以及对于文件的管理。这些都是我们在C语言所少见的，因此阅读之后让我对于C++有了比较新的认识和理解。
