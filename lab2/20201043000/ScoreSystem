#include <iostream>	
#include <fstream>
#include <list>
#include <sstream>		//字符串转换

using namespace std;

//信息管理系统类
class Mamasys
{
private:
	//学生全局结构
	struct Student
	{//虽然学生属性都是字符串类型，但是后面对数据进行处理时，
	 //也会将部分字符串数据转换为数字类型进行操作
		string name;		//姓名
		string age;			//年龄
		string num;			//学号
		string CppScore;	//C++成绩
		string Major;	//专业
	};

	list<Student> studlist;	//存储所有学生信息的容器

	string path;			//文件路径

	//将容器中所有信息写入到文件中
	void ofsallMess()
	{
		ofstream ofst;
		//以清空源文件内容方式打开文件
		ofst.open(path, ios::trunc);

		//判断文件是否打开成功
		if (!ofst.is_open())
		{
			cout << "文件打开失败" << endl;
			return;
		}

		//将容器中的所有信息写入到文件中，这里的endl必须在开头写，末尾不能写，否则会出现一系列问题
		for (list<Student>::const_iterator it = studlist.begin(); it != studlist.end(); it++)
			ofst << endl << it->num << endl << it->name << endl << it->age << endl << it->CppScore << endl << it->Major;
		
		//关闭文件
		ofst.close();
	}

public:
	//构造函数用于将文件中的内容按格式读取到list<Student>中
	Mamasys()
	{
		cout << "E:\\lab2.csvs" << endl;
		cin >> path;

		ifstream ifstr;
		ifstr.open(path, ios::in);		//打开文件路径中的文件，如果打开失败则创建该文件
		if (!ifstr.is_open());
		{
			ofstream temp(path);		//创建文件
			temp.open(path,ios::out);
			if (!temp.is_open())		//检测是否创建成功
			{
				cout << "创建文件失败，退出程序" << endl;
				exit(-1);
			}
			//文件成功创建则关闭文件
			temp.close();
		}
	
		system ("cls");

		//将文件中所有内容读取到list容器中
		ifstream ifst;
		ifst.open(path, ios::in);

		char line[14];		//这里必须是字符数组
		Student temp;
		
		//空读取一行因为新文件第一行不保存内容
		ifst.getline(line, sizeof(line));

		//成行读取文件中的内容
		//循环读取五行信息，每五行将信息插入到容器中
		while (!ifst.eof())
		{
			//保存到临时学生temp中
			ifst.getline(line, sizeof(line));
			temp.num = line;		//学号
			ifst.getline(line, sizeof(line));
			temp.name = line;		//姓名
			ifst.getline(line, sizeof(line));
			temp.age = line;		//年龄
			ifst.getline(line, sizeof(line));
			temp.CppScore = line;	//C++成绩
			ifst.getline(line, sizeof(line));
			temp.Major = line;	//专业

			//将temp插入到学生容器中
			studlist.push_back(temp);
		}
		Hint();		//显示提示信息
	}

	//输出提示信息成员函数
	void Hint()
	{
		cout << "--------学生信息管理系统--------" << endl << endl;
		cout << "1 添加学生信息（尾部添加）" << endl;
		cout << "2 查看所有学生信息" << endl;
		cout << "3 查找学生信息（学号、姓名）" << endl;
		cout << "4 插入学生信息（在输入学号信息前插入）" << endl;
		cout << "5 修改学生数据（学号）" << endl;
		cout << "6 输出统计数据（总和、平均值等）" << endl;
		cout << "7 退出程序" << endl << endl;
		cout << "所有功能在执行完毕后，都会自动将当前信息保存进文件" << endl << endl;
	}

	//添加学生信息
	bool AddMess()
	{
		//创建一个学生结构
		Student student;
		
		L1:
		//输出提示信息，并输入学生信息，输入-1结束输入
		cout << "学号：		"; cin >> student.num;
		if (student.num == "-1") return false;
		cout << "姓名：		"; cin >> student.name;
		if (student.name == "-1") return false;
		cout << "年龄：		"; cin >> student.age;
		if (student.age == "-1") return false;
		cout << "C++成绩：	"; cin >> student.CppScore;
		if (student.CppScore == "-1") return false;
		cout << "专业：	"; cin >> student.Major;
		if (student.Major == "-1") return false;

		cout << endl;

		studlist.push_back(student);	//将新添加的学生信息尾插到容器中

		//只将新添加的学生信息追加到文件中
		//创建写入流对象
		ofstream ofst;
		//在文件路径中以追加方式打开文件
		ofst.open(path, ios::app);	

		//将学生信息按顺序写入到文件中，这里的endl，只能按照这个格式写
		ofst << endl << student.num << endl << student.name << endl << student.age << endl << student.CppScore << endl << student.Major;

		//关闭文件
		ofst.close();

		//返回true继续录入学生信息
		return true;
	}

	//查看所有学生信息
	void PrintMess()
	{
		cout << endl;
		for (list<Student>::const_iterator it = studlist.begin(); it != studlist.end(); it++)
		{
			cout << "学号：		" << it->num << endl;
			cout << "姓名：		" << it->name << endl;
			cout << "年龄：		" << it->age << endl;
			cout << "C++成绩：	" << it->CppScore << endl;
			cout << "专业：	" << it->Major << endl << endl;
		}
	}

	//查找（姓名||学号）
	void FindMess()
	{
		char key;
		cout << "输入1代表按学号查找，其他代表按姓名查找" << endl;
		cin >> key ;
		
		//按学号查找
		if (key == '1')
		{
			string findnum;
			cout << "请输入需要查找的学生序号：";
			cin >> findnum;

			for (list<Student>::const_iterator it = studlist.begin(); it != studlist.end(); it++)
				if (it->num == findnum)
				{
					cout << "学号：		" << it->num << endl;
					cout << "姓名：		" << it->name << endl;
					cout << "年龄：		" << it->age << endl;
					cout << "C++成绩：	" << it->CppScore << endl;
					cout << "专业：	" << it->Major << endl << endl;
					return;		//因为学号具有唯一性，所以找到后输出完信息直接返回
				}

			//函数没有结束执行到这里说明没有找到学号，输出提示信息
			cout << "没有找到学号为“ " << findnum << " ”的学生" << endl;
		}
		//按姓名查找
		else
		{
			string findname;
			cout << "请输入需要查找的学生姓名：";
			cin >> findname;
			bool sign = false;	//标记是否找到学生

			//输出所有名为findname的学生信息
			for (list<Student>::const_iterator it = studlist.begin(); it != studlist.end(); it++)
				if (it->name == findname)
				{
					cout << "学号：		" << it->num << endl;
					cout << "姓名：		" << it->name << endl;
					cout << "年龄：		" << it->age << endl;
					cout << "C++成绩：	" << it->CppScore << endl;
					cout << "专业：	" << it->Major << endl << endl;
					sign = true;
				}

			//如果没有找到则输出提示信息
			if (!sign)
				cout << "没有找到名为“" << findname << "”的学生" << endl;
		}
	}


	//向中间插入学生数据
	void InsertMess()
	{
		string instudnum = "0";
		bool sign = false;
	L1:
		cout << "请输入需要插入在学生前面的该学生的学号：" << endl;
		cin >> instudnum;
		list<Student>::const_iterator it;
		for (it = studlist.begin(); it != studlist.end(); it++)
			if (instudnum == it->num) break;
		
		//如果it==容器末尾迭代器了，则说明没有找到该学号
		if (it == studlist.end())
		{
			cout << "没有找到该学号" << endl;
			goto L1;
		}
			
		//创建一个学生结点，将该结点信息，插入到容器中
		Student student;

	L2:
		//输出提示信息，并输入学生信息
		cout << "学号：		"; cin >> student.num;

		//输入这个学生的信息
		cout << "姓名：		"; cin >> student.name;
		cout << "年龄：		"; cin >> student.age;
		cout << "C++成绩：	"; cin >> student.CppScore;
		cout << "专业：	"; cin >> student.Major;

		//将该结点插入到容器中
		studlist.insert(it, student);

		//将容器中内容写入文件中
		ofsallMess();
		cout << "已插入" << endl;
	}


	//修改学生的信息
	void ModifyMess()
	{
		string Modstudentnum;
	L1:
		cout << "请输入需要修改的学生的学号：" << endl;
		cin >> Modstudentnum;

		//修改迭代器指向结点的值
		for (list<Student>::iterator it = studlist.begin(); it != studlist.end(); it++)
			if (it->num == Modstudentnum)
			{
				//先输出原信息
				cout << endl << "该学生原信息：" << endl << endl;
				cout << "学号：		" << it->num << endl;
				cout << "姓名：		" << it->name << endl;
				cout << "年龄：		" << it->age << endl;
				cout << "C++成绩：	" << it->CppScore << endl;
				cout << "专业：	" << it->Major << endl << endl;
				//再修改
				cout << "需要修改信息：" << endl << endl;
				cout << "学号：		"; cin >> it->num;
				cout << "姓名：		"; cin >> it->name;
				cout << "年龄：		"; cin >> it->age;
				cout << "C++成绩：	"; cin >> it->CppScore;
				cout << "专业：	"; cin >> it->Major;
				break;
			}
		
		//刷新文件中的信息
		ofsallMess();
		cout << endl << "已修改" << endl;
	}
	//C:\\Users\\ASUS\\Desktop\\测试, txt
	//统计学生数据
	void StatMess()
	{
		//功能：返回学生的总个数
		//所有学生各成绩的总分、平均分

		int cppscoresum = 0, mathscoresum = 0;	//成绩和
		int cppscoreave = 0, mathscoreave = 0;	//成绩平均值
		int num = 0;	//学生数
		for (list<Student>::iterator it = studlist.begin(); it != studlist.end(); it++)
		{
			//将C++成绩转换为数字
			int Cpptemp;
			stringstream ss_1;
			ss_1 << it->CppScore;
			ss_1 >> Cpptemp;

			cppscoresum += Cpptemp;		//统计C++成绩和

			

		//C++平均成绩
		cppscoreave = cppscoresum / num;


		cout << "总学生数：" << num << endl << endl;
		cout << "C++平均成绩：" << cppscoreave  << endl << endl;
		
	}

};

//主函数
int main()
{
	//设置控制台标题
	system("title C++ 学生信息管理系统");

	//创建管理系统对象
	Mamasys mamasys;

	//key接收一个值，根据key的值执行不同的功能
	char key = '0';
	cout << endl << "请输入需要执行的功能：" << endl;
	cin >> key;
	cout << endl;
	
	while (true)
	{
		switch (key)
		{
		case '1':		//添加学生信息
			cout << "自动循环添加数据，结束添加请输入-1" << endl << endl;
			while (mamasys.AddMess());
			cout << endl << "已添加" << endl << endl;
			break;
		case '2':		//输出所有信息
			mamasys.PrintMess(); 
			break;
		case '3':		//查找 姓名||学号
			mamasys.FindMess();
			break;
		case '4':		//在中间插入学生数据
			mamasys.InsertMess();
			break;
		case '5':		//修改学生的数据
			mamasys.ModifyMess();
			break;
		case '6':		//输出统计数据（总和、平均值等）
			mamasys.StatMess();
			break;
		case '7':		//退出程序
			return 0;
		}

		system("pause");

		system("cls");			//每次功能执行完，清屏，输出提示信息
		mamasys.Hint();

		//功能执行完毕，key再接收一个值
		cout << endl << "请输入需要执行的功能：" << endl;
		cin >> key;
		cout << endl;
	}
	
    return 0;
}
