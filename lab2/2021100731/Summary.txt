  1.   第一章主要介绍了C++语言的历史起源，并介绍了C++是如何在不同系统环境下被编译的。同时介绍了面向对象编程这一概念。我理解的面向对象就是将偏向底层的操作通过规范化的函数、方法进行封装，这样程序员就可以直接调用这些方法，从而专注于程序逻辑的编写，而不用操心具体底层的数据操作。
  2.   第二章通过几个程序的例子介绍了一个C++程序最基本的结构要求，介绍了头文件、main函数、数据空间等等概念，是编写一个简单程序需要具备的最简单要求。
  3.   第三章主要介绍了数据类型。包括整型int、short、long等等，浮点型float、double等等。同时还比较了const方式与#define方式的优劣，并且具体讲解了数据类型转换的情况与具体语法。
  4.   第四章主要介绍了数组、结构体、联合体、指针的概念。其中指针可以灵活地访问数组、结构体的地址，比如可以将指针作为函数传入变量来实现数组传参与结构体传参等。同时可以实现数据结构的结合，比如结构体中定义数组成员，或结构体类型的数组。
  5.   第十六章主要讲了string类、vector和STL。其中string类可以把它看作是char数组，可以使用操作数组的方法来对string类型进行操作。一些函数（比如cin）需要string类型的对象作为存放空间，如果要输出该字符串就必须使用.c_str()来转换类型。我认为vector类型可以被看作是操作方法更丰富的数组，有许多现成的方法可以对一个vector类型的对象进行操作，灵活程度比数组更高。智慧指针和STL部分还有点没看明白，之前没有了解过这方面的概念，还需要时间理解。
  6.   第十七章首先介绍了输入和输出。数据流和缓冲区是这一过程中比较重要的概念。数据流负责数据传输，而缓冲区负责数据的暂存。cin、cout就是输入流与输出流。而这两个对象又分别有各自包含的函数方法，比如cout.percision()、cin.clear()等等。对于文件的输入输出，有ifstream、ofstream来实现文件的读取与写入，也是这次作业里功能实现的最重要操作。还有is_open()等方法来让我们获知文件的状态。

